{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n\n// const useValidForm = (valueVariable, minLen = 0, maxLen = Infinity, minUpper = 0, minLower = 0, minDigits = 0) => {\n//   // Проверка на пустую строку\n//   const [notEmpty, setNotEmpty] = useState(false);\n\n//   // Проверка номера телефона\n//   const [correctPhoneNumber, setCorrectPhoneNumber] = useState(false);\n\n//   // Проверка email\n//   const [correctEmail, setCorrectEmail] = useState(false);\n\n//   // Проверка на наличие заглавных букв\n//   const [hasEnoughUpperCase, setHasEnoughUpperCase] = useState(false);\n\n//   // Проверка на наличие строчных букв\n//   const [hasEnoughLowerCase, setHasEnoughLowerCase] = useState(false);\n\n//   // Проверка на наличие специального символа\n//   const [hasSpecialChar, setHasSpecialChar] = useState(false);\n\n//   // Проверка на минимальную длину строки\n//   const [minLength, setMinLength] = useState(false);\n\n//   // Проверка на максимальную длину строки\n//   const [maxLength, setMaxLength] = useState(false);\n\n//   // Проверка на наличие цифр\n//   const [hasEnoughDigits, setHasEnoughDigits] = useState(false);\n\n//   useEffect(() => {\n//     const trimmedValue = valueVariable.trim();\n\n//     // Проверка на пустую строку\n//     setNotEmpty(trimmedValue.length > 0);\n\n//     // Проверка номера телефона (должен содержать цифры)\n//     const phoneNumberPattern = /\\d/;\n//     setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));\n\n//     // Проверка email\n//     const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     setCorrectEmail(emailPattern.test(trimmedValue));\n\n//     // Проверка на наличие заглавных букв\n//     const upperCaseCount = (trimmedValue.match(/[A-Z]/g) || []).length;\n//     setHasEnoughUpperCase(upperCaseCount >= minUpper);\n\n//     // Проверка на наличие строчных букв\n//     const lowerCaseCount = (trimmedValue.match(/[a-z]/g) || []).length;\n//     setHasEnoughLowerCase(lowerCaseCount >= minLower);\n\n//     // Проверка на наличие специального символа\n//     const specialCharPattern = /[!@#$%^&*(),.?\":{}|<>]/;\n//     setHasSpecialChar(specialCharPattern.test(trimmedValue));\n\n//     // Проверка на минимальную длину строки\n//     setMinLength(trimmedValue.length >= minLen);\n\n//     // Проверка на максимальную длину строки\n//     setMaxLength(trimmedValue.length <= maxLen);\n\n//     // Проверка на наличие цифр\n//     const digitCount = (trimmedValue.match(/\\d/g) || []).length;\n//     setHasEnoughDigits(digitCount >= minDigits);\n\n//   }, [valueVariable, minLen, maxLen, minUpper, minLower, minDigits]);\n\n//   return {\n//     notEmpty,\n//     correctPhoneNumber,\n//     correctEmail,\n//     hasEnoughUpperCase,\n//     hasEnoughLowerCase,\n//     hasSpecialChar,\n//     minLength,\n//     maxLength,\n//     hasEnoughDigits\n//   };\n// };\n\n// export default useValidForm;","map":{"version":3,"names":[],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useValidForm.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// const useValidForm = (valueVariable, minLen = 0, maxLen = Infinity, minUpper = 0, minLower = 0, minDigits = 0) => {\n//   // Проверка на пустую строку\n//   const [notEmpty, setNotEmpty] = useState(false);\n\n//   // Проверка номера телефона\n//   const [correctPhoneNumber, setCorrectPhoneNumber] = useState(false);\n\n//   // Проверка email\n//   const [correctEmail, setCorrectEmail] = useState(false);\n\n//   // Проверка на наличие заглавных букв\n//   const [hasEnoughUpperCase, setHasEnoughUpperCase] = useState(false);\n\n//   // Проверка на наличие строчных букв\n//   const [hasEnoughLowerCase, setHasEnoughLowerCase] = useState(false);\n\n//   // Проверка на наличие специального символа\n//   const [hasSpecialChar, setHasSpecialChar] = useState(false);\n\n//   // Проверка на минимальную длину строки\n//   const [minLength, setMinLength] = useState(false);\n\n//   // Проверка на максимальную длину строки\n//   const [maxLength, setMaxLength] = useState(false);\n\n//   // Проверка на наличие цифр\n//   const [hasEnoughDigits, setHasEnoughDigits] = useState(false);\n\n//   useEffect(() => {\n//     const trimmedValue = valueVariable.trim();\n\n//     // Проверка на пустую строку\n//     setNotEmpty(trimmedValue.length > 0);\n\n//     // Проверка номера телефона (должен содержать цифры)\n//     const phoneNumberPattern = /\\d/;\n//     setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));\n\n//     // Проверка email\n//     const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     setCorrectEmail(emailPattern.test(trimmedValue));\n\n//     // Проверка на наличие заглавных букв\n//     const upperCaseCount = (trimmedValue.match(/[A-Z]/g) || []).length;\n//     setHasEnoughUpperCase(upperCaseCount >= minUpper);\n\n//     // Проверка на наличие строчных букв\n//     const lowerCaseCount = (trimmedValue.match(/[a-z]/g) || []).length;\n//     setHasEnoughLowerCase(lowerCaseCount >= minLower);\n\n//     // Проверка на наличие специального символа\n//     const specialCharPattern = /[!@#$%^&*(),.?\":{}|<>]/;\n//     setHasSpecialChar(specialCharPattern.test(trimmedValue));\n\n//     // Проверка на минимальную длину строки\n//     setMinLength(trimmedValue.length >= minLen);\n\n//     // Проверка на максимальную длину строки\n//     setMaxLength(trimmedValue.length <= maxLen);\n\n//     // Проверка на наличие цифр\n//     const digitCount = (trimmedValue.match(/\\d/g) || []).length;\n//     setHasEnoughDigits(digitCount >= minDigits);\n\n//   }, [valueVariable, minLen, maxLen, minUpper, minLower, minDigits]);\n\n//   return {\n//     notEmpty,\n//     correctPhoneNumber,\n//     correctEmail,\n//     hasEnoughUpperCase,\n//     hasEnoughLowerCase,\n//     hasSpecialChar,\n//     minLength,\n//     maxLength,\n//     hasEnoughDigits\n//   };\n// };\n\n// export default useValidForm;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}