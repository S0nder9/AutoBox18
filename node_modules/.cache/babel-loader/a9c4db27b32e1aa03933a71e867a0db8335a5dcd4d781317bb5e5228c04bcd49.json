{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npatr\\\\Documents\\\\GitHub\\\\AutoBox18\\\\autobox\\\\src\\\\Components\\\\UI\\\\Forms\\\\FormForCall.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n\n// const FormForCall = ({ display }) => {\n//     const [sentName, setSentName] = useState();\n//     const [sentPhoneNumber, setSentPhoneNumber] = useState();\n//     const [errorState, setErrorState] = useState(false);\n//     const [errorMessage, setErrorMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const sentDatahandler = (e) => {\n//         e.preventDefault();\n\n//         const refNameValue = refName.current.value;\n//         const refPhoneValue = refPhone.current.value;\n\n//         const notEmpty = useValidForm(refNameValue);\n//         const correctPhoneNumber = useValidForm(refPhoneValue);\n\n//         // Имя\n//         if (!notEmpty) {\n//             setSentName(\"Пользователь не указал имя\");\n//         } else {\n//             setSentName(refNameValue);\n//         }\n\n//         // Номер телефона\n//         if (!correctPhoneNumber) {\n//             setErrorState(true);\n//             setErrorMessage(\"Укажите номер телефона\");\n//             return;\n//         } else {\n//             setErrorState(false);\n//             setErrorMessage(\"\");\n//             setSentPhoneNumber(refPhoneValue);\n//         }\n\n//         // Чек-бокс\n//         if (!correctPhoneNumber) {\n//             setErrorState(true);\n//             setIsChecked(false);\n//         } else {\n//             setErrorState(false);\n//             setIsChecked(true);\n//         }\n\n//         if (errorState) {\n//             console.log(\"Введены не все данные\");\n//             return;\n//         } else {\n//             console.log(`${sentName} ${sentPhoneNumber}`);\n//         }\n//     };\n\n//     return (\n//         <>\n//             {errorState && <ErrorPopup timeOut=\"5000\" message={errorMessage} />}\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"number\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport styles from \"./FormForCall.module.css\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\nimport useValidForm from \"../../../Hooks/useValidForm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormForCall = ({\n  display\n}) => {\n  _s();\n  const [sentName, setSentName] = useState(\"\");\n  const [sentPhoneNumber, setSentPhoneNumber] = useState(\"\");\n  const [errorState, setErrorState] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(false);\n  const refName = useRef();\n  const refPhone = useRef();\n  const [refNameValue, setRefNameValue] = useState(\"\");\n  const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n  const {\n    notEmpty: isNameNotEmpty\n  } = useValidForm(refNameValue);\n  const {\n    correctPhoneNumber: isPhoneNumberValid\n  } = useValidForm(refPhoneValue);\n  useEffect(() => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  }, []);\n  const handleCheckboxChange = e => {\n    setIsChecked(e.target.checked);\n  };\n  const handleNameChange = () => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n  };\n  const handlePhoneChange = () => {\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  };\n  const sentDatahandler = e => {\n    e.preventDefault();\n    if (!isNameNotEmpty) {\n      setSentName(\"Пользователь не указал имя\");\n    } else {\n      setSentName(refNameValue);\n    }\n    if (!isPhoneNumberValid) {\n      setErrorState(true);\n      setErrorMessage(\"Укажите номер телефона\");\n      return;\n    } else {\n      setErrorState(false);\n      setErrorMessage(\"\");\n      setSentPhoneNumber(refPhoneValue);\n    }\n    if (errorState) {\n      console.log(\"Введены не все данные\");\n      return;\n    } else {\n      console.log(`${sentName} ${sentPhoneNumber}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errorState && /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      style: {\n        display: display\n      },\n      onSubmit: sentDatahandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u0418\\u041C\\u042F\",\n        type: \"text\",\n        name: \"text\",\n        className: \"input\",\n        ref: refName,\n        onChange: handleNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u041D\\u041E\\u041C\\u0415\\u0420 \\u0422\\u0415\\u041B\\u0415\\u0424\\u041E\\u041D\\u0410 *\",\n        type: \"text\",\n        name: \"number\",\n        className: \"input\",\n        ref: refPhone,\n        onChange: handlePhoneChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.privacyContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"privacy\",\n          checked: isChecked,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"privacy\",\n          className: styles.privacyText,\n          children: [\"\\u0441\\u043E\\u0433\\u043B\\u0430\\u0441\\u0435\\u043D \\u0441 \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/privacy-policy\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.spanColor,\n              children: \"\\u043F\\u043E\\u043B\\u0438\\u0442\\u0438\\u043A\\u043E\\u0439 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.submitButton,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"textWhiteSmall\",\n          children: \"\\u041E\\u0422\\u041F\\u0420\\u0410\\u0412\\u0418\\u0422\\u042C \\u0417\\u0410\\u042F\\u0412\\u041A\\u0423\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FormForCall, \"CRmVcnfzWxjtlgk00I323KinRWQ=\", false, function () {\n  return [useValidForm, useValidForm];\n});\n_c = FormForCall;\nexport default FormForCall;\nvar _c;\n$RefreshReg$(_c, \"FormForCall\");","map":{"version":3,"names":["Link","styles","useRef","useState","useEffect","ErrorPopup","useValidForm","jsxDEV","_jsxDEV","Fragment","_Fragment","FormForCall","display","_s","sentName","setSentName","sentPhoneNumber","setSentPhoneNumber","errorState","setErrorState","errorMessage","setErrorMessage","isChecked","setIsChecked","refName","refPhone","refNameValue","setRefNameValue","refPhoneValue","setRefPhoneValue","notEmpty","isNameNotEmpty","correctPhoneNumber","isPhoneNumberValid","current","value","handleCheckboxChange","e","target","checked","handleNameChange","handlePhoneChange","sentDatahandler","preventDefault","console","log","children","timeOut","message","fileName","_jsxFileName","lineNumber","columnNumber","className","form","style","onSubmit","placeholder","type","name","ref","onChange","privacyContainer","id","htmlFor","privacyText","to","spanColor","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Forms/FormForCall.js"],"sourcesContent":["// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [sentName, setSentName] = useState();\r\n//     const [sentPhoneNumber, setSentPhoneNumber] = useState();\r\n//     const [errorState, setErrorState] = useState(false);\r\n//     const [errorMessage, setErrorMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const sentDatahandler = (e) => {\r\n//         e.preventDefault();\r\n\r\n//         const refNameValue = refName.current.value;\r\n//         const refPhoneValue = refPhone.current.value;\r\n\r\n//         const notEmpty = useValidForm(refNameValue);\r\n//         const correctPhoneNumber = useValidForm(refPhoneValue);\r\n\r\n//         // Имя\r\n//         if (!notEmpty) {\r\n//             setSentName(\"Пользователь не указал имя\");\r\n//         } else {\r\n//             setSentName(refNameValue);\r\n//         }\r\n\r\n//         // Номер телефона\r\n//         if (!correctPhoneNumber) {\r\n//             setErrorState(true);\r\n//             setErrorMessage(\"Укажите номер телефона\");\r\n//             return;\r\n//         } else {\r\n//             setErrorState(false);\r\n//             setErrorMessage(\"\");\r\n//             setSentPhoneNumber(refPhoneValue);\r\n//         }\r\n\r\n//         // Чек-бокс\r\n//         if (!correctPhoneNumber) {\r\n//             setErrorState(true);\r\n//             setIsChecked(false);\r\n//         } else {\r\n//             setErrorState(false);\r\n//             setIsChecked(true);\r\n//         }\r\n\r\n//         if (errorState) {\r\n//             console.log(\"Введены не все данные\");\r\n//             return;\r\n//         } else {\r\n//             console.log(`${sentName} ${sentPhoneNumber}`);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             {errorState && <ErrorPopup timeOut=\"5000\" message={errorMessage} />}\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"number\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\n\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport styles from \"./FormForCall.module.css\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\nimport useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\nconst FormForCall = ({ display }) => {\r\n    const [sentName, setSentName] = useState(\"\");\r\n    const [sentPhoneNumber, setSentPhoneNumber] = useState(\"\");\r\n    const [errorState, setErrorState] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    const refName = useRef();\r\n    const refPhone = useRef();\r\n\r\n    const [refNameValue, setRefNameValue] = useState(\"\");\r\n    const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n    const { notEmpty: isNameNotEmpty } = useValidForm(refNameValue);\r\n    const { correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue);\r\n\r\n    useEffect(() => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    }, []);\r\n\r\n    const handleCheckboxChange = (e) => {\r\n        setIsChecked(e.target.checked);\r\n    };\r\n\r\n    const handleNameChange = () => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n    };\r\n\r\n    const handlePhoneChange = () => {\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    };\r\n\r\n    const sentDatahandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!isNameNotEmpty) {\r\n            setSentName(\"Пользователь не указал имя\");\r\n        } else {\r\n            setSentName(refNameValue);\r\n        }\r\n\r\n        if (!isPhoneNumberValid) {\r\n            setErrorState(true);\r\n            setErrorMessage(\"Укажите номер телефона\");\r\n            return;\r\n        } else {\r\n            setErrorState(false);\r\n            setErrorMessage(\"\");\r\n            setSentPhoneNumber(refPhoneValue);\r\n        }\r\n\r\n        if (errorState) {\r\n            console.log(\"Введены не все данные\");\r\n            return;\r\n        } else {\r\n            console.log(`${sentName} ${sentPhoneNumber}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {errorState && <ErrorPopup timeOut=\"5000\" message={errorMessage} />}\r\n            <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"input\"\r\n                    ref={refName}\r\n                    onChange={handleNameChange}\r\n                />\r\n\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    className=\"input\"\r\n                    ref={refPhone}\r\n                    onChange={handlePhoneChange}\r\n                />\r\n\r\n                <div className={styles.privacyContainer}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"privacy\"\r\n                        checked={isChecked}\r\n                        onChange={handleCheckboxChange}\r\n                    />\r\n                    <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n                        согласен с <Link to=\"/privacy-policy\">\r\n                            <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n                        </Link>\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\" className={styles.submitButton}>\r\n                    <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormForCall;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}