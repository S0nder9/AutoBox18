{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useValidForm = (valueVariable, minLen = 0, maxLen = Infinity, minUpper = 0, minLower = 0, minDigits = 0) => {\n  _s();\n  // Проверка на пустую строку\n  const [notEmpty, setNotEmpty] = useState(false);\n\n  // Проверка номера телефона\n  const [correctPhoneNumber, setCorrectPhoneNumber] = useState(false);\n\n  // Проверка email\n  const [correctEmail, setCorrectEmail] = useState(false);\n\n  // Проверка на наличие заглавных букв\n  const [hasEnoughUpperCase, setHasEnoughUpperCase] = useState(false);\n\n  // Проверка на наличие строчных букв\n  const [hasEnoughLowerCase, setHasEnoughLowerCase] = useState(false);\n\n  // Проверка на наличие специального символа\n  const [hasSpecialChar, setHasSpecialChar] = useState(false);\n\n  // Проверка на минимальную длину строки\n  const [minLength, setMinLength] = useState(false);\n\n  // Проверка на максимальную длину строки\n  const [maxLength, setMaxLength] = useState(false);\n\n  // Проверка на наличие цифр\n  const [hasEnoughDigits, setHasEnoughDigits] = useState(false);\n  useEffect(() => {\n    const trimmedValue = valueVariable.trim();\n\n    // Проверка на пустую строку\n    setNotEmpty(trimmedValue.length > 0);\n\n    // Проверка номера телефона (должен содержать цифры)\n    const phoneNumberPattern = /\\d/;\n    setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));\n\n    // Проверка email\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    setCorrectEmail(emailPattern.test(trimmedValue));\n\n    // Проверка на наличие заглавных букв\n    const upperCaseCount = (trimmedValue.match(/[A-Z]/g) || []).length;\n    setHasEnoughUpperCase(upperCaseCount >= minUpper);\n\n    // Проверка на наличие строчных букв\n    const lowerCaseCount = (trimmedValue.match(/[a-z]/g) || []).length;\n    setHasEnoughLowerCase(lowerCaseCount >= minLower);\n\n    // Проверка на наличие специального символа\n    const specialCharPattern = /[!@#$%^&*(),.?\":{}|<>]/;\n    setHasSpecialChar(specialCharPattern.test(trimmedValue));\n\n    // Проверка на минимальную длину строки\n    setMinLength(trimmedValue.length >= minLen);\n\n    // Проверка на максимальную длину строки\n    setMaxLength(trimmedValue.length <= maxLen);\n\n    // Проверка на наличие цифр\n    const digitCount = (trimmedValue.match(/\\d/g) || []).length;\n    setHasEnoughDigits(digitCount >= minDigits);\n  }, [valueVariable, minLen, maxLen, minUpper, minLower, minDigits]);\n  return {\n    notEmpty,\n    correctPhoneNumber,\n    correctEmail,\n    hasEnoughUpperCase,\n    hasEnoughLowerCase,\n    hasSpecialChar,\n    minLength,\n    maxLength,\n    hasEnoughDigits\n  };\n};\n_s(useValidForm, \"A1Fv2C/GLVxGjN1jBYP8U3slk/E=\");\nexport default useValidForm;","map":{"version":3,"names":["useState","useEffect","useValidForm","valueVariable","minLen","maxLen","Infinity","minUpper","minLower","minDigits","_s","notEmpty","setNotEmpty","correctPhoneNumber","setCorrectPhoneNumber","correctEmail","setCorrectEmail","hasEnoughUpperCase","setHasEnoughUpperCase","hasEnoughLowerCase","setHasEnoughLowerCase","hasSpecialChar","setHasSpecialChar","minLength","setMinLength","maxLength","setMaxLength","hasEnoughDigits","setHasEnoughDigits","trimmedValue","trim","length","phoneNumberPattern","test","emailPattern","upperCaseCount","match","lowerCaseCount","specialCharPattern","digitCount"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useValidForm.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useValidForm = (valueVariable, minLen = 0, maxLen = Infinity, minUpper = 0, minLower = 0, minDigits = 0) => {\n  // Проверка на пустую строку\n  const [notEmpty, setNotEmpty] = useState(false);\n\n  // Проверка номера телефона\n  const [correctPhoneNumber, setCorrectPhoneNumber] = useState(false);\n\n  // Проверка email\n  const [correctEmail, setCorrectEmail] = useState(false);\n\n  // Проверка на наличие заглавных букв\n  const [hasEnoughUpperCase, setHasEnoughUpperCase] = useState(false);\n\n  // Проверка на наличие строчных букв\n  const [hasEnoughLowerCase, setHasEnoughLowerCase] = useState(false);\n\n  // Проверка на наличие специального символа\n  const [hasSpecialChar, setHasSpecialChar] = useState(false);\n\n  // Проверка на минимальную длину строки\n  const [minLength, setMinLength] = useState(false);\n\n  // Проверка на максимальную длину строки\n  const [maxLength, setMaxLength] = useState(false);\n\n  // Проверка на наличие цифр\n  const [hasEnoughDigits, setHasEnoughDigits] = useState(false);\n\n  useEffect(() => {\n    const trimmedValue = valueVariable.trim();\n\n    // Проверка на пустую строку\n    setNotEmpty(trimmedValue.length > 0);\n\n    // Проверка номера телефона (должен содержать цифры)\n    const phoneNumberPattern = /\\d/;\n    setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));\n\n    // Проверка email\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    setCorrectEmail(emailPattern.test(trimmedValue));\n\n    // Проверка на наличие заглавных букв\n    const upperCaseCount = (trimmedValue.match(/[A-Z]/g) || []).length;\n    setHasEnoughUpperCase(upperCaseCount >= minUpper);\n\n    // Проверка на наличие строчных букв\n    const lowerCaseCount = (trimmedValue.match(/[a-z]/g) || []).length;\n    setHasEnoughLowerCase(lowerCaseCount >= minLower);\n\n    // Проверка на наличие специального символа\n    const specialCharPattern = /[!@#$%^&*(),.?\":{}|<>]/;\n    setHasSpecialChar(specialCharPattern.test(trimmedValue));\n\n    // Проверка на минимальную длину строки\n    setMinLength(trimmedValue.length >= minLen);\n\n    // Проверка на максимальную длину строки\n    setMaxLength(trimmedValue.length <= maxLen);\n\n    // Проверка на наличие цифр\n    const digitCount = (trimmedValue.match(/\\d/g) || []).length;\n    setHasEnoughDigits(digitCount >= minDigits);\n\n  }, [valueVariable, minLen, maxLen, minUpper, minLower, minDigits]);\n\n  return {\n    notEmpty,\n    correctPhoneNumber,\n    correctEmail,\n    hasEnoughUpperCase,\n    hasEnoughLowerCase,\n    hasSpecialChar,\n    minLength,\n    maxLength,\n    hasEnoughDigits\n  };\n};\n\nexport default useValidForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}