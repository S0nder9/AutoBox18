{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npatr\\\\Documents\\\\GitHub\\\\AutoBox18\\\\autobox\\\\src\\\\Components\\\\UI\\\\Forms\\\\FormForCall.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState, useEffect } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n\n// const FormForCall = ({ display }) => {\n//     const [errors, setErrors] = useState([]);\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const [refNameValue, setRefNameValue] = useState(\"\");\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n\n//     useEffect(() => {\n//         if (refName.current) {\n//             setRefNameValue(refName.current.value);\n//         }\n//         if (refPhone.current) {\n//             setRefPhoneValue(refPhone.current.value);\n//         }\n//     }, [refName.current?.value, refPhone.current?.value]);\n\n//     // Обработчик изменения состояния чекбокса\n//     const handleCheckboxChange = (e) => {\n//         setIsChecked(e.target.checked);\n//     };\n\n//     // Проверяем данные и отправляем сообщение\n//     const sentDataHandler = (e) => {\n//         e.preventDefault();\n//         const newErrors = [];\n\n//         if (!isNameNotEmpty) {\n//             newErrors.push(\"Укажите имя\");\n//         }\n\n//         if (!isPhoneNumberValid) {\n//             newErrors.push(\"Укажите номер телефона\");\n//         }\n\n//         if (!isChecked) {\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n//         }\n\n//         if (newErrors.length > 0) {\n//             setErrors(newErrors);\n//             setSuccessMessage(\"\");\n//         } else {\n//             setErrors([]);\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n//             sentDataToTelegramHandler();\n//         }\n//     };\n\n//     const sentDataToTelegramHandler = async () => {\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\n//         const chatId = '1345888410';\n//         const text = `\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\n//         `;\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n\n//         try {\n//           const response = await fetch(url, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 chat_id: chatId,\n//                 text: text,\n//                 parse_mode: 'HTML',\n//             }),\n//           });\n\n//           if (!response.ok) {\n//             setErrorStateForTg(true);\n//           } else {\n//             setErrorStateForTg(false);\n//           }\n//         } catch (error) {\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\n//           setErrorStateForTg(true);\n//         }\n//       };\n\n//     return (\n//         <>\n//             {errors.map((error, index) => (\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\n//             ))}\n\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\n\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                     onChange={() => setRefNameValue(refName.current.value)}\n//                     value={refNameValue}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"text\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\n//                     value={refPhoneValue}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                         onChange={handleCheckboxChange}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\nimport { Link } from \"react-router-dom\";\nimport styles from \"./FormForCall.module.css\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\nimport useValidForm from \"../../../Hooks/useValidForm\";\nimport useHttp from \"../../../Hooks/useHttp\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormForCall = ({\n  display\n}) => {\n  _s();\n  var _refName$current, _refPhone$current;\n  const [errors, setErrors] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(false);\n  const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n  const refName = useRef();\n  const refPhone = useRef();\n  const [refNameValue, setRefNameValue] = useState(\"\");\n  const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n  const {\n    notEmpty: isNameNotEmpty,\n    correctPhoneNumber: isPhoneNumberValid\n  } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n  useEffect(() => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  }, [(_refName$current = refName.current) === null || _refName$current === void 0 ? void 0 : _refName$current.value, (_refPhone$current = refPhone.current) === null || _refPhone$current === void 0 ? void 0 : _refPhone$current.value]);\n  const handleCheckboxChange = e => {\n    setIsChecked(e.target.checked);\n  };\n  const sentDataHandler = e => {\n    e.preventDefault();\n    const newErrors = [];\n    if (!isNameNotEmpty) {\n      newErrors.push(\"Укажите имя\");\n    }\n    if (!isPhoneNumberValid) {\n      newErrors.push(\"Укажите номер телефона\");\n    }\n    if (!isChecked) {\n      newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n      setSuccessMessage(\"\");\n    } else {\n      setErrors([]);\n      setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n      console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n      sentDataToTelegramHandler();\n    }\n  };\n  const {\n    data\n  } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {\n    method: \"GET\"\n  });\n  const sentDataToTelegramHandler = async () => {\n    if (!data) return;\n    const botToken = data.Token;\n    const chatId = data.ChatId;\n    const url = `${data.UrlPart1}${botToken}${data.UrlPart2}`;\n    const text = `\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\n        <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n        <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\n        `;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chat_id: chatId,\n          text: text,\n          parse_mode: 'HTML'\n        })\n      });\n      if (!response.ok) {\n        setErrorStateForTg(true);\n      } else {\n        setErrorStateForTg(false);\n      }\n    } catch (error) {\n      console.error('Ошибка при отправке сообщения в Telegram:', error);\n      setErrorStateForTg(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errors.map((error, index) => /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: error\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }, this)), errorStateForTg && /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: \"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043A\\u0430\\u043A\\u0430\\u044F-\\u0442\\u043E \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 33\n    }, this), errorStateForTg === false && /*#__PURE__*/_jsxDEV(SuccessPopup, {\n      timeOut: \"5000\",\n      message: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      style: {\n        display: display\n      },\n      onSubmit: sentDataHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u0418\\u041C\\u042F\",\n        type: \"text\",\n        name: \"text\",\n        className: \"input\",\n        ref: refName,\n        onChange: () => setRefNameValue(refName.current.value),\n        value: refNameValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u041D\\u041E\\u041C\\u0415\\u0420 \\u0422\\u0415\\u041B\\u0415\\u0424\\u041E\\u041D\\u0410 *\",\n        type: \"text\",\n        name: \"number\",\n        className: \"input\",\n        ref: refPhone,\n        onChange: () => setRefPhoneValue(refPhone.current.value),\n        value: refPhoneValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.privacyContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"privacy\",\n          checked: isChecked,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"privacy\",\n          className: styles.privacyText,\n          children: [\"\\u0441\\u043E\\u0433\\u043B\\u0430\\u0441\\u0435\\u043D \\u0441 \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/privacy-policy\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.spanColor,\n              children: \"\\u043F\\u043E\\u043B\\u0438\\u0442\\u0438\\u043A\\u043E\\u0439 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.submitButton,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"textWhiteSmall\",\n          children: \"\\u041E\\u0422\\u041F\\u0420\\u0410\\u0412\\u0418\\u0422\\u042C \\u0417\\u0410\\u042F\\u0412\\u041A\\u0423\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FormForCall, \"aVWAc/F6bXZWsJP3j/7ft/NPRJw=\", false, function () {\n  return [useValidForm, useHttp];\n});\n_c = FormForCall;\nexport default FormForCall;\n\n// import { Link } from \"react-router-dom\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState, useEffect } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\"\n// import useHttp from \"../../../Hooks/useHttp\";\n\n// const FormForCall = ({ display }) => {\n//     const [errors, setErrors] = useState([]);\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const [refNameValue, setRefNameValue] = useState(\"\");\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n\n//     useEffect(() => {\n//         if (refName.current) {\n//             setRefNameValue(refName.current.value);\n//         }\n//         if (refPhone.current) {\n//             setRefPhoneValue(refPhone.current.value);\n//         }\n//     }, [refName.current?.value, refPhone.current?.value]);\n\n//     // Обработчик изменения состояния чекбокса\n//     const handleCheckboxChange = (e) => {\n//         setIsChecked(e.target.checked);\n//     };\n\n//     // Проверяем данные и отправляем сообщение\n//     const sentDataHandler = (e) => {\n//         e.preventDefault();\n//         const newErrors = [];\n\n//         if (!isNameNotEmpty) {\n//             newErrors.push(\"Укажите имя\");\n//         }\n\n//         if (!isPhoneNumberValid) {\n//             newErrors.push(\"Укажите номер телефона\");\n//         }\n\n//         if (!isChecked) {\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n//         }\n\n//         if (newErrors.length > 0) {\n//             setErrors(newErrors);\n//             setSuccessMessage(\"\");\n//         } else {\n//             setErrors([]);\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n//             sentDataToTelegramHandler();\n//         }\n//     };\n\n//     const { data } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {method: \"GET\"});\n//     const botToken = data.Token;\n//     const chatId = data.ChatId;\n//     const url = `${data.UrlPart1}${botToken}${data.UrlPart2}`;\n\n//     const sentDataToTelegramHandler = async () => {\n\n//         const text = `\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//         <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\n//         `;\n\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n//                     chat_id: chatId,\n//                     text: text,\n//                     parse_mode: 'HTML',\n//                     reply_markup: {\n//                         inline_keyboard: [[\n//                             {\n//                                 text: 'Отметить',\n//                                 callback_data: 'mark'\n//                             }\n//                         ]]\n//                     }\n//                 }),\n//             });\n\n//             if (!response.ok) {\n//                 setErrorStateForTg(true);\n//             } else {\n//                 setErrorStateForTg(false);\n//             }\n//         } catch (error) {\n//             console.error('Ошибка при отправке сообщения в Telegram:', error);\n//             setErrorStateForTg(true);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleTelegramCallback = async (update) => {\n//             if (update.callback_query && update.callback_query.data === 'mark') {\n//                 const message_id = update.callback_query.message.message_id;\n//                 const chat_id = update.callback_query.message.chat.id;\n\n//                 const url = `https://api.telegram.org/bot${botToken}/editMessageText`;\n//                 const text = `<b>У вас новая запись, перезвоните:</b>\\n\\n\n//                 <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//                 <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\\n\\n\n//                 <span style=\"color:green;\">Отмечено</span>`;\n\n//                 try {\n//                     await fetch(url, {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                         body: JSON.stringify({\n//                             chat_id: chat_id,\n//                             message_id: message_id,\n//                             text: text,\n//                             parse_mode: 'HTML'\n//                         })\n//                     });\n//                 } catch (error) {\n//                     console.error('Ошибка при обновлении сообщения в Telegram:', error);\n//                 }\n//             }\n//         };\n\n//         const url = `https://api.telegram.org/bot${botToken}/getUpdates`;\n//         const intervalId = setInterval(async () => {\n//             try {\n//                 const response = await fetch(url);\n//                 const updates = await response.json();\n//                 if (updates.result.length > 0) {\n//                     updates.result.forEach(handleTelegramCallback);\n//                 }\n//             } catch (error) {\n//                 console.error('Ошибка при получении обновлений из Telegram:', error);\n//             }\n//         }, 5000);\n\n//         return () => clearInterval(intervalId);\n//     }, []);\n\n//     return (\n//         <>\n//             {errors.map((error, index) => (\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\n//             ))}\n\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\n\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                     onChange={() => setRefNameValue(refName.current.value)}\n//                     value={refNameValue}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"text\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\n//                     value={refPhoneValue}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                         onChange={handleCheckboxChange}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\nvar _c;\n$RefreshReg$(_c, \"FormForCall\");","map":{"version":3,"names":["Link","styles","useRef","useState","useEffect","ErrorPopup","SuccessPopup","useValidForm","useHttp","jsxDEV","_jsxDEV","Fragment","_Fragment","FormForCall","display","_s","_refName$current","_refPhone$current","errors","setErrors","successMessage","setSuccessMessage","isChecked","setIsChecked","errorStateForTg","setErrorStateForTg","undefined","refName","refPhone","refNameValue","setRefNameValue","refPhoneValue","setRefPhoneValue","notEmpty","isNameNotEmpty","correctPhoneNumber","isPhoneNumberValid","Infinity","current","value","handleCheckboxChange","e","target","checked","sentDataHandler","preventDefault","newErrors","push","length","console","log","sentDataToTelegramHandler","data","method","botToken","Token","chatId","ChatId","url","UrlPart1","UrlPart2","text","response","fetch","headers","body","JSON","stringify","chat_id","parse_mode","ok","error","children","map","index","timeOut","message","fileName","_jsxFileName","lineNumber","columnNumber","className","form","style","onSubmit","placeholder","type","name","ref","onChange","privacyContainer","id","htmlFor","privacyText","to","spanColor","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Forms/FormForCall.js"],"sourcesContent":["// import { Link } from \"react-router-dom\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [errors, setErrors] = useState([]);\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const [refNameValue, setRefNameValue] = useState(\"\");\r\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n//     useEffect(() => {\r\n//         if (refName.current) {\r\n//             setRefNameValue(refName.current.value);\r\n//         }\r\n//         if (refPhone.current) {\r\n//             setRefPhoneValue(refPhone.current.value);\r\n//         }\r\n//     }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n//     // Обработчик изменения состояния чекбокса\r\n//     const handleCheckboxChange = (e) => {\r\n//         setIsChecked(e.target.checked);\r\n//     };\r\n\r\n//     // Проверяем данные и отправляем сообщение\r\n//     const sentDataHandler = (e) => {\r\n//         e.preventDefault();\r\n//         const newErrors = [];\r\n\r\n//         if (!isNameNotEmpty) {\r\n//             newErrors.push(\"Укажите имя\");\r\n//         }\r\n\r\n//         if (!isPhoneNumberValid) {\r\n//             newErrors.push(\"Укажите номер телефона\");\r\n//         }\r\n\r\n//         if (!isChecked) {\r\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n//         }\r\n\r\n//         if (newErrors.length > 0) {\r\n//             setErrors(newErrors);\r\n//             setSuccessMessage(\"\");\r\n//         } else {\r\n//             setErrors([]);\r\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n//             sentDataToTelegramHandler();\r\n//         }\r\n//     };\r\n\r\n//     const sentDataToTelegramHandler = async () => {\r\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\r\n//         const chatId = '1345888410';\r\n//         const text = `\r\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\r\n//         `;\r\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n      \r\n//         try {\r\n//           const response = await fetch(url, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 chat_id: chatId,\r\n//                 text: text,\r\n//                 parse_mode: 'HTML',\r\n//             }),\r\n//           });\r\n      \r\n//           if (!response.ok) {\r\n//             setErrorStateForTg(true);\r\n//           } else {\r\n//             setErrorStateForTg(false);\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n//           setErrorStateForTg(true);\r\n//         }\r\n//       };\r\n      \r\n\r\n//     return (\r\n//         <>\r\n//             {errors.map((error, index) => (\r\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n//             ))}\r\n            \r\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                     onChange={() => setRefNameValue(refName.current.value)}\r\n//                     value={refNameValue}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"text\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n//                     value={refPhoneValue}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                         onChange={handleCheckboxChange}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./FormForCall.module.css\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\nimport useValidForm from \"../../../Hooks/useValidForm\";\r\nimport useHttp from \"../../../Hooks/useHttp\";\r\n\r\nconst FormForCall = ({ display }) => {\r\n    const [errors, setErrors] = useState([]);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n    const refName = useRef();\r\n    const refPhone = useRef();\r\n\r\n    const [refNameValue, setRefNameValue] = useState(\"\");\r\n    const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n    const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n    useEffect(() => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n    const handleCheckboxChange = (e) => {\r\n        setIsChecked(e.target.checked);\r\n    };\r\n\r\n    const sentDataHandler = (e) => {\r\n        e.preventDefault();\r\n        const newErrors = [];\r\n\r\n        if (!isNameNotEmpty) {\r\n            newErrors.push(\"Укажите имя\");\r\n        }\r\n\r\n        if (!isPhoneNumberValid) {\r\n            newErrors.push(\"Укажите номер телефона\");\r\n        }\r\n\r\n        if (!isChecked) {\r\n            newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n        }\r\n\r\n        if (newErrors.length > 0) {\r\n            setErrors(newErrors);\r\n            setSuccessMessage(\"\");\r\n        } else {\r\n            setErrors([]);\r\n            setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n            console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n            sentDataToTelegramHandler();\r\n        }\r\n    };\r\n\r\n    const { data } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {method: \"GET\"});\r\n\r\n    const sentDataToTelegramHandler = async () => {\r\n        if (!data) return ;\r\n\r\n        const botToken = data.Token;\r\n        const chatId = data.ChatId;\r\n        const url = `${data.UrlPart1}${botToken}${data.UrlPart2}`;\r\n\r\n        const text = `\r\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n        <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n        <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\r\n        `;\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    chat_id: chatId,\r\n                    text: text,\r\n                    parse_mode: 'HTML',\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                setErrorStateForTg(true);\r\n            } else {\r\n                setErrorStateForTg(false);\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n            setErrorStateForTg(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {errors.map((error, index) => (\r\n                <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n            ))}\r\n            \r\n            {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n            {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n            <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"input\"\r\n                    ref={refName}\r\n                    onChange={() => setRefNameValue(refName.current.value)}\r\n                    value={refNameValue}\r\n                />\r\n\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    className=\"input\"\r\n                    ref={refPhone}\r\n                    onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n                    value={refPhoneValue}\r\n                />\r\n\r\n                <div className={styles.privacyContainer}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"privacy\"\r\n                        checked={isChecked}\r\n                        onChange={handleCheckboxChange}\r\n                    />\r\n                    <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n                        согласен с <Link to=\"/privacy-policy\">\r\n                            <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n                        </Link>\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\" className={styles.submitButton}>\r\n                    <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormForCall;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { Link } from \"react-router-dom\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\"\r\n// import useHttp from \"../../../Hooks/useHttp\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [errors, setErrors] = useState([]);\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const [refNameValue, setRefNameValue] = useState(\"\");\r\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n//     useEffect(() => {\r\n//         if (refName.current) {\r\n//             setRefNameValue(refName.current.value);\r\n//         }\r\n//         if (refPhone.current) {\r\n//             setRefPhoneValue(refPhone.current.value);\r\n//         }\r\n//     }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n//     // Обработчик изменения состояния чекбокса\r\n//     const handleCheckboxChange = (e) => {\r\n//         setIsChecked(e.target.checked);\r\n//     };\r\n\r\n//     // Проверяем данные и отправляем сообщение\r\n//     const sentDataHandler = (e) => {\r\n//         e.preventDefault();\r\n//         const newErrors = [];\r\n\r\n//         if (!isNameNotEmpty) {\r\n//             newErrors.push(\"Укажите имя\");\r\n//         }\r\n\r\n//         if (!isPhoneNumberValid) {\r\n//             newErrors.push(\"Укажите номер телефона\");\r\n//         }\r\n\r\n//         if (!isChecked) {\r\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n//         }\r\n\r\n//         if (newErrors.length > 0) {\r\n//             setErrors(newErrors);\r\n//             setSuccessMessage(\"\");\r\n//         } else {\r\n//             setErrors([]);\r\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n//             sentDataToTelegramHandler();\r\n//         }\r\n//     };\r\n\r\n//     const { data } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {method: \"GET\"});\r\n//     const botToken = data.Token;\r\n//     const chatId = data.ChatId;\r\n//     const url = `${data.UrlPart1}${botToken}${data.UrlPart2}`;\r\n\r\n//     const sentDataToTelegramHandler = async () => {\r\n        \r\n        \r\n//         const text = `\r\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//         <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\r\n//         `;\r\n\r\n        \r\n\r\n//         try {\r\n//             const response = await fetch(url, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     chat_id: chatId,\r\n//                     text: text,\r\n//                     parse_mode: 'HTML',\r\n//                     reply_markup: {\r\n//                         inline_keyboard: [[\r\n//                             {\r\n//                                 text: 'Отметить',\r\n//                                 callback_data: 'mark'\r\n//                             }\r\n//                         ]]\r\n//                     }\r\n//                 }),\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 setErrorStateForTg(true);\r\n//             } else {\r\n//                 setErrorStateForTg(false);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n//             setErrorStateForTg(true);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const handleTelegramCallback = async (update) => {\r\n//             if (update.callback_query && update.callback_query.data === 'mark') {\r\n//                 const message_id = update.callback_query.message.message_id;\r\n//                 const chat_id = update.callback_query.message.chat.id;\r\n\r\n//                 const url = `https://api.telegram.org/bot${botToken}/editMessageText`;\r\n//                 const text = `<b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//                 <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//                 <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\\n\\n\r\n//                 <span style=\"color:green;\">Отмечено</span>`;\r\n\r\n//                 try {\r\n//                     await fetch(url, {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                         body: JSON.stringify({\r\n//                             chat_id: chat_id,\r\n//                             message_id: message_id,\r\n//                             text: text,\r\n//                             parse_mode: 'HTML'\r\n//                         })\r\n//                     });\r\n//                 } catch (error) {\r\n//                     console.error('Ошибка при обновлении сообщения в Telegram:', error);\r\n//                 }\r\n//             }\r\n//         };\r\n\r\n//         const url = `https://api.telegram.org/bot${botToken}/getUpdates`;\r\n//         const intervalId = setInterval(async () => {\r\n//             try {\r\n//                 const response = await fetch(url);\r\n//                 const updates = await response.json();\r\n//                 if (updates.result.length > 0) {\r\n//                     updates.result.forEach(handleTelegramCallback);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Ошибка при получении обновлений из Telegram:', error);\r\n//             }\r\n//         }, 5000);\r\n\r\n//         return () => clearInterval(intervalId);\r\n//     }, []);\r\n\r\n//     return (\r\n//         <>\r\n//             {errors.map((error, index) => (\r\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n//             ))}\r\n\r\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                     onChange={() => setRefNameValue(refName.current.value)}\r\n//                     value={refNameValue}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"text\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n//                     value={refPhoneValue}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                         onChange={handleCheckboxChange}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,SAASC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACnD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,OAAO,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,gBAAA,EAAAC,iBAAA;EACjC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC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B1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}