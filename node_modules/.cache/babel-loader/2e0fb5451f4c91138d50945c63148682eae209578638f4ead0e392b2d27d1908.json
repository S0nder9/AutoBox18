{"ast":null,"code":"// import { Link } from \"react-router-dom\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState, useEffect } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n\n// const FormForCall = ({ display }) => {\n//     const [errors, setErrors] = useState([]);\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const [refNameValue, setRefNameValue] = useState(\"\");\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n\n//     useEffect(() => {\n//         if (refName.current) {\n//             setRefNameValue(refName.current.value);\n//         }\n//         if (refPhone.current) {\n//             setRefPhoneValue(refPhone.current.value);\n//         }\n//     }, [refName.current?.value, refPhone.current?.value]);\n\n//     // Обработчик изменения состояния чекбокса\n//     const handleCheckboxChange = (e) => {\n//         setIsChecked(e.target.checked);\n//     };\n\n//     // Проверяем данные и отправляем сообщение\n//     const sentDataHandler = (e) => {\n//         e.preventDefault();\n//         const newErrors = [];\n\n//         if (!isNameNotEmpty) {\n//             newErrors.push(\"Укажите имя\");\n//         }\n\n//         if (!isPhoneNumberValid) {\n//             newErrors.push(\"Укажите номер телефона\");\n//         }\n\n//         if (!isChecked) {\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n//         }\n\n//         if (newErrors.length > 0) {\n//             setErrors(newErrors);\n//             setSuccessMessage(\"\");\n//         } else {\n//             setErrors([]);\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n//             sentDataToTelegramHandler();\n//         }\n//     };\n\n//     const sentDataToTelegramHandler = async () => {\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\n//         const chatId = '1345888410';\n//         const text = `\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\n//         `;\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n\n//         try {\n//           const response = await fetch(url, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 chat_id: chatId,\n//                 text: text,\n//                 parse_mode: 'HTML',\n//             }),\n//           });\n\n//           if (!response.ok) {\n//             setErrorStateForTg(true);\n//           } else {\n//             setErrorStateForTg(false);\n//           }\n//         } catch (error) {\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\n//           setErrorStateForTg(true);\n//         }\n//       };\n\n//     return (\n//         <>\n//             {errors.map((error, index) => (\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\n//             ))}\n\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\n\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                     onChange={() => setRefNameValue(refName.current.value)}\n//                     value={refNameValue}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"text\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\n//                     value={refPhoneValue}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                         onChange={handleCheckboxChange}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\n// import { Link } from \"react-router-dom\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState, useEffect } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n\n// const FormForCall = ({ display }) => {\n//     const [errors, setErrors] = useState([]);\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const [refNameValue, setRefNameValue] = useState(\"\");\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n\n//     useEffect(() => {\n//         if (refName.current) {\n//             setRefNameValue(refName.current.value);\n//         }\n//         if (refPhone.current) {\n//             setRefPhoneValue(refPhone.current.value);\n//         }\n//     }, [refName.current?.value, refPhone.current?.value]);\n\n//     // Обработчик изменения состояния чекбокса\n//     const handleCheckboxChange = (e) => {\n//         setIsChecked(e.target.checked);\n//     };\n\n//     // Проверяем данные и отправляем сообщение\n//     const sentDataHandler = (e) => {\n//         e.preventDefault();\n//         const newErrors = [];\n\n//         if (!isNameNotEmpty) {\n//             newErrors.push(\"Укажите имя\");\n//         }\n\n//         if (!isPhoneNumberValid) {\n//             newErrors.push(\"Укажите номер телефона\");\n//         }\n\n//         if (!isChecked) {\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n//         }\n\n//         if (newErrors.length > 0) {\n//             setErrors(newErrors);\n//             setSuccessMessage(\"\");\n//         } else {\n//             setErrors([]);\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n//             sentDataToTelegramHandler();\n//         }\n//     };\n\n//     const sentDataToTelegramHandler = async () => {\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\n//         const chatId = '1345888410';\n//         const text = `\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\n//         `;\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n\n//         try {\n//           const response = await fetch(url, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 chat_id: chatId,\n//                 text: text,\n//                 parse_mode: 'HTML',\n//             }),\n//           });\n\n//           if (!response.ok) {\n//             setErrorStateForTg(true);\n//           } else {\n//             setErrorStateForTg(false);\n//           }\n//         } catch (error) {\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\n//           setErrorStateForTg(true);\n//         }\n//       };\n\n//     return (\n//         <>\n//             {errors.map((error, index) => (\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\n//             ))}\n\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\n\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                     onChange={() => setRefNameValue(refName.current.value)}\n//                     value={refNameValue}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"text\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\n//                     value={refPhoneValue}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                         onChange={handleCheckboxChange}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\n// import { Link } from \"react-router-dom\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState, useEffect } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\"\n// import useHttp from \"../../../Hooks/useHttp\";\n\n// const FormForCall = ({ display }) => {\n//     const [errors, setErrors] = useState([]);\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const [refNameValue, setRefNameValue] = useState(\"\");\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n\n//     useEffect(() => {\n//         if (refName.current) {\n//             setRefNameValue(refName.current.value);\n//         }\n//         if (refPhone.current) {\n//             setRefPhoneValue(refPhone.current.value);\n//         }\n//     }, [refName.current?.value, refPhone.current?.value]);\n\n//     // Обработчик изменения состояния чекбокса\n//     const handleCheckboxChange = (e) => {\n//         setIsChecked(e.target.checked);\n//     };\n\n//     // Проверяем данные и отправляем сообщение\n//     const sentDataHandler = (e) => {\n//         e.preventDefault();\n//         const newErrors = [];\n\n//         if (!isNameNotEmpty) {\n//             newErrors.push(\"Укажите имя\");\n//         }\n\n//         if (!isPhoneNumberValid) {\n//             newErrors.push(\"Укажите номер телефона\");\n//         }\n\n//         if (!isChecked) {\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n//         }\n\n//         if (newErrors.length > 0) {\n//             setErrors(newErrors);\n//             setSuccessMessage(\"\");\n//         } else {\n//             setErrors([]);\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n//             sentDataToTelegramHandler();\n//         }\n//     };\n\n//     const { data } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {method: \"GET\"});\n//     const botToken = data.Token;\n//     const chatId = data.ChatId;\n//     const url = `${data.UrlPart1}${botToken}${data.UrlPart2}`;\n\n//     const sentDataToTelegramHandler = async () => {\n\n//         const text = `\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//         <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\n//         `;\n\n//         try {\n//             const response = await fetch(url, {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({\n//                     chat_id: chatId,\n//                     text: text,\n//                     parse_mode: 'HTML',\n//                     reply_markup: {\n//                         inline_keyboard: [[\n//                             {\n//                                 text: 'Отметить',\n//                                 callback_data: 'mark'\n//                             }\n//                         ]]\n//                     }\n//                 }),\n//             });\n\n//             if (!response.ok) {\n//                 setErrorStateForTg(true);\n//             } else {\n//                 setErrorStateForTg(false);\n//             }\n//         } catch (error) {\n//             console.error('Ошибка при отправке сообщения в Telegram:', error);\n//             setErrorStateForTg(true);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleTelegramCallback = async (update) => {\n//             if (update.callback_query && update.callback_query.data === 'mark') {\n//                 const message_id = update.callback_query.message.message_id;\n//                 const chat_id = update.callback_query.message.chat.id;\n\n//                 const url = `https://api.telegram.org/bot${botToken}/editMessageText`;\n//                 const text = `<b>У вас новая запись, перезвоните:</b>\\n\\n\n//                 <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//                 <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\\n\\n\n//                 <span style=\"color:green;\">Отмечено</span>`;\n\n//                 try {\n//                     await fetch(url, {\n//                         method: 'POST',\n//                         headers: {\n//                             'Content-Type': 'application/json',\n//                         },\n//                         body: JSON.stringify({\n//                             chat_id: chat_id,\n//                             message_id: message_id,\n//                             text: text,\n//                             parse_mode: 'HTML'\n//                         })\n//                     });\n//                 } catch (error) {\n//                     console.error('Ошибка при обновлении сообщения в Telegram:', error);\n//                 }\n//             }\n//         };\n\n//         const url = `https://api.telegram.org/bot${botToken}/getUpdates`;\n//         const intervalId = setInterval(async () => {\n//             try {\n//                 const response = await fetch(url);\n//                 const updates = await response.json();\n//                 if (updates.result.length > 0) {\n//                     updates.result.forEach(handleTelegramCallback);\n//                 }\n//             } catch (error) {\n//                 console.error('Ошибка при получении обновлений из Telegram:', error);\n//             }\n//         }, 5000);\n\n//         return () => clearInterval(intervalId);\n//     }, []);\n\n//     return (\n//         <>\n//             {errors.map((error, index) => (\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\n//             ))}\n\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\n\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                     onChange={() => setRefNameValue(refName.current.value)}\n//                     value={refNameValue}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"text\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\n//                     value={refPhoneValue}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                         onChange={handleCheckboxChange}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;","map":{"version":3,"names":[],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Forms/FormForCall.js"],"sourcesContent":["// import { Link } from \"react-router-dom\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [errors, setErrors] = useState([]);\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const [refNameValue, setRefNameValue] = useState(\"\");\r\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n//     useEffect(() => {\r\n//         if (refName.current) {\r\n//             setRefNameValue(refName.current.value);\r\n//         }\r\n//         if (refPhone.current) {\r\n//             setRefPhoneValue(refPhone.current.value);\r\n//         }\r\n//     }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n//     // Обработчик изменения состояния чекбокса\r\n//     const handleCheckboxChange = (e) => {\r\n//         setIsChecked(e.target.checked);\r\n//     };\r\n\r\n//     // Проверяем данные и отправляем сообщение\r\n//     const sentDataHandler = (e) => {\r\n//         e.preventDefault();\r\n//         const newErrors = [];\r\n\r\n//         if (!isNameNotEmpty) {\r\n//             newErrors.push(\"Укажите имя\");\r\n//         }\r\n\r\n//         if (!isPhoneNumberValid) {\r\n//             newErrors.push(\"Укажите номер телефона\");\r\n//         }\r\n\r\n//         if (!isChecked) {\r\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n//         }\r\n\r\n//         if (newErrors.length > 0) {\r\n//             setErrors(newErrors);\r\n//             setSuccessMessage(\"\");\r\n//         } else {\r\n//             setErrors([]);\r\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n//             sentDataToTelegramHandler();\r\n//         }\r\n//     };\r\n\r\n//     const sentDataToTelegramHandler = async () => {\r\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\r\n//         const chatId = '1345888410';\r\n//         const text = `\r\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\r\n//         `;\r\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n      \r\n//         try {\r\n//           const response = await fetch(url, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 chat_id: chatId,\r\n//                 text: text,\r\n//                 parse_mode: 'HTML',\r\n//             }),\r\n//           });\r\n      \r\n//           if (!response.ok) {\r\n//             setErrorStateForTg(true);\r\n//           } else {\r\n//             setErrorStateForTg(false);\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n//           setErrorStateForTg(true);\r\n//         }\r\n//       };\r\n      \r\n\r\n//     return (\r\n//         <>\r\n//             {errors.map((error, index) => (\r\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n//             ))}\r\n            \r\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                     onChange={() => setRefNameValue(refName.current.value)}\r\n//                     value={refNameValue}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"text\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n//                     value={refPhoneValue}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                         onChange={handleCheckboxChange}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { Link } from \"react-router-dom\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [errors, setErrors] = useState([]);\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const [refNameValue, setRefNameValue] = useState(\"\");\r\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n//     useEffect(() => {\r\n//         if (refName.current) {\r\n//             setRefNameValue(refName.current.value);\r\n//         }\r\n//         if (refPhone.current) {\r\n//             setRefPhoneValue(refPhone.current.value);\r\n//         }\r\n//     }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n//     // Обработчик изменения состояния чекбокса\r\n//     const handleCheckboxChange = (e) => {\r\n//         setIsChecked(e.target.checked);\r\n//     };\r\n\r\n//     // Проверяем данные и отправляем сообщение\r\n//     const sentDataHandler = (e) => {\r\n//         e.preventDefault();\r\n//         const newErrors = [];\r\n\r\n//         if (!isNameNotEmpty) {\r\n//             newErrors.push(\"Укажите имя\");\r\n//         }\r\n\r\n//         if (!isPhoneNumberValid) {\r\n//             newErrors.push(\"Укажите номер телефона\");\r\n//         }\r\n\r\n//         if (!isChecked) {\r\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n//         }\r\n\r\n//         if (newErrors.length > 0) {\r\n//             setErrors(newErrors);\r\n//             setSuccessMessage(\"\");\r\n//         } else {\r\n//             setErrors([]);\r\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n//             sentDataToTelegramHandler();\r\n//         }\r\n//     };\r\n\r\n//     const sentDataToTelegramHandler = async () => {\r\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\r\n//         const chatId = '1345888410';\r\n//         const text = `\r\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\r\n//         `;\r\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n      \r\n//         try {\r\n//           const response = await fetch(url, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 chat_id: chatId,\r\n//                 text: text,\r\n//                 parse_mode: 'HTML',\r\n//             }),\r\n//           });\r\n      \r\n//           if (!response.ok) {\r\n//             setErrorStateForTg(true);\r\n//           } else {\r\n//             setErrorStateForTg(false);\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n//           setErrorStateForTg(true);\r\n//         }\r\n//       };\r\n      \r\n\r\n//     return (\r\n//         <>\r\n//             {errors.map((error, index) => (\r\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n//             ))}\r\n            \r\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                     onChange={() => setRefNameValue(refName.current.value)}\r\n//                     value={refNameValue}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"text\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n//                     value={refPhoneValue}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                         onChange={handleCheckboxChange}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { Link } from \"react-router-dom\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\"\r\n// import useHttp from \"../../../Hooks/useHttp\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [errors, setErrors] = useState([]);\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const [refNameValue, setRefNameValue] = useState(\"\");\r\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n//     useEffect(() => {\r\n//         if (refName.current) {\r\n//             setRefNameValue(refName.current.value);\r\n//         }\r\n//         if (refPhone.current) {\r\n//             setRefPhoneValue(refPhone.current.value);\r\n//         }\r\n//     }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n//     // Обработчик изменения состояния чекбокса\r\n//     const handleCheckboxChange = (e) => {\r\n//         setIsChecked(e.target.checked);\r\n//     };\r\n\r\n//     // Проверяем данные и отправляем сообщение\r\n//     const sentDataHandler = (e) => {\r\n//         e.preventDefault();\r\n//         const newErrors = [];\r\n\r\n//         if (!isNameNotEmpty) {\r\n//             newErrors.push(\"Укажите имя\");\r\n//         }\r\n\r\n//         if (!isPhoneNumberValid) {\r\n//             newErrors.push(\"Укажите номер телефона\");\r\n//         }\r\n\r\n//         if (!isChecked) {\r\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n//         }\r\n\r\n//         if (newErrors.length > 0) {\r\n//             setErrors(newErrors);\r\n//             setSuccessMessage(\"\");\r\n//         } else {\r\n//             setErrors([]);\r\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n//             sentDataToTelegramHandler();\r\n//         }\r\n//     };\r\n\r\n//     const { data } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {method: \"GET\"});\r\n//     const botToken = data.Token;\r\n//     const chatId = data.ChatId;\r\n//     const url = `${data.UrlPart1}${botToken}${data.UrlPart2}`;\r\n\r\n//     const sentDataToTelegramHandler = async () => {\r\n        \r\n        \r\n//         const text = `\r\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//         <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\r\n//         `;\r\n\r\n        \r\n\r\n//         try {\r\n//             const response = await fetch(url, {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     chat_id: chatId,\r\n//                     text: text,\r\n//                     parse_mode: 'HTML',\r\n//                     reply_markup: {\r\n//                         inline_keyboard: [[\r\n//                             {\r\n//                                 text: 'Отметить',\r\n//                                 callback_data: 'mark'\r\n//                             }\r\n//                         ]]\r\n//                     }\r\n//                 }),\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 setErrorStateForTg(true);\r\n//             } else {\r\n//                 setErrorStateForTg(false);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n//             setErrorStateForTg(true);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const handleTelegramCallback = async (update) => {\r\n//             if (update.callback_query && update.callback_query.data === 'mark') {\r\n//                 const message_id = update.callback_query.message.message_id;\r\n//                 const chat_id = update.callback_query.message.chat.id;\r\n\r\n//                 const url = `https://api.telegram.org/bot${botToken}/editMessageText`;\r\n//                 const text = `<b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//                 <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//                 <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\\n\\n\r\n//                 <span style=\"color:green;\">Отмечено</span>`;\r\n\r\n//                 try {\r\n//                     await fetch(url, {\r\n//                         method: 'POST',\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json',\r\n//                         },\r\n//                         body: JSON.stringify({\r\n//                             chat_id: chat_id,\r\n//                             message_id: message_id,\r\n//                             text: text,\r\n//                             parse_mode: 'HTML'\r\n//                         })\r\n//                     });\r\n//                 } catch (error) {\r\n//                     console.error('Ошибка при обновлении сообщения в Telegram:', error);\r\n//                 }\r\n//             }\r\n//         };\r\n\r\n//         const url = `https://api.telegram.org/bot${botToken}/getUpdates`;\r\n//         const intervalId = setInterval(async () => {\r\n//             try {\r\n//                 const response = await fetch(url);\r\n//                 const updates = await response.json();\r\n//                 if (updates.result.length > 0) {\r\n//                     updates.result.forEach(handleTelegramCallback);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Ошибка при получении обновлений из Telegram:', error);\r\n//             }\r\n//         }, 5000);\r\n\r\n//         return () => clearInterval(intervalId);\r\n//     }, []);\r\n\r\n//     return (\r\n//         <>\r\n//             {errors.map((error, index) => (\r\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n//             ))}\r\n\r\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                     onChange={() => setRefNameValue(refName.current.value)}\r\n//                     value={refNameValue}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"text\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n//                     value={refPhoneValue}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                         onChange={handleCheckboxChange}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}