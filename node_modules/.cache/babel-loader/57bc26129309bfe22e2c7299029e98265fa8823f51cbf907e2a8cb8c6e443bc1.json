{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useExchangeBuffer = () => {\n  _s();\n  const [forPopupState, setForPopupState] = useState(undefined);\n  const [textSuccess, setTextSuccess] = useState(\"\");\n  const [textError, setTextError] = useState(\"\");\n  const handleCopy = e => {\n    const textToCopy = e.target.innerText;\n    console.log(\"Текст для копирования:\", textToCopy); // Отладочное сообщение\n\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      console.log(\"Текст успешно скопирован.\"); // Отладочное сообщение\n      setForPopupState(true);\n      setTextSuccess(\"Текст успешно скопирован в буфер обмена\");\n      setTextError(\"\"); // Очистить сообщение об ошибке, если было\n      setTimeout(() => setForPopupState(undefined), 5000); // Сброс состояния через 5 секунд\n    }).catch(error => {\n      console.log(\"Ошибка копирования текста:\", error); // Отладочное сообщение\n      setForPopupState(false);\n      setTextError(`Не удалось скопировать текст: ${error}`);\n      setTextSuccess(\"\"); // Очистить сообщение об успехе, если было\n      setTimeout(() => setForPopupState(undefined), 5000); // Сброс состояния через 5 секунд\n    });\n  };\n  return {\n    handleCopy,\n    textSuccess,\n    textError,\n    forPopupState\n  };\n};\n_s(useExchangeBuffer, \"8PbPFsPtSkgDxwYjjh8KxUEZin8=\");\nexport default useExchangeBuffer;","map":{"version":3,"names":["useState","useExchangeBuffer","_s","forPopupState","setForPopupState","undefined","textSuccess","setTextSuccess","textError","setTextError","handleCopy","e","textToCopy","target","innerText","console","log","navigator","clipboard","writeText","then","setTimeout","catch","error"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useExchangeBuffer.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useExchangeBuffer = () => {\r\n    const [forPopupState, setForPopupState] = useState(undefined);\r\n    const [textSuccess, setTextSuccess] = useState(\"\");\r\n    const [textError, setTextError] = useState(\"\");\r\n\r\n    const handleCopy = (e) => {\r\n        const textToCopy = e.target.innerText;\r\n        console.log(\"Текст для копирования:\", textToCopy); // Отладочное сообщение\r\n\r\n        navigator.clipboard.writeText(textToCopy)\r\n            .then(() => {\r\n                console.log(\"Текст успешно скопирован.\"); // Отладочное сообщение\r\n                setForPopupState(true);\r\n                setTextSuccess(\"Текст успешно скопирован в буфер обмена\");\r\n                setTextError(\"\"); // Очистить сообщение об ошибке, если было\r\n                setTimeout(() => setForPopupState(undefined), 5000); // Сброс состояния через 5 секунд\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Ошибка копирования текста:\", error); // Отладочное сообщение\r\n                setForPopupState(false);\r\n                setTextError(`Не удалось скопировать текст: ${error}`);\r\n                setTextSuccess(\"\"); // Очистить сообщение об успехе, если было\r\n                setTimeout(() => setForPopupState(undefined), 5000); // Сброс состояния через 5 секунд\r\n            });\r\n    };\r\n\r\n    return {\r\n        handleCopy,\r\n        textSuccess,\r\n        textError,\r\n        forPopupState\r\n    };\r\n}\r\n\r\nexport default useExchangeBuffer;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAACK,SAAS,CAAC;EAC7D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMU,UAAU,GAAIC,CAAC,IAAK;IACtB,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAM,CAACC,SAAS;IACrCC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEJ,UAAU,CAAC,CAAC,CAAC;;IAEnDK,SAAS,CAACC,SAAS,CAACC,SAAS,CAACP,UAAU,CAAC,CACpCQ,IAAI,CAAC,MAAM;MACRL,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;MAC1CZ,gBAAgB,CAAC,IAAI,CAAC;MACtBG,cAAc,CAAC,yCAAyC,CAAC;MACzDE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;MAClBY,UAAU,CAAC,MAAMjB,gBAAgB,CAACC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CACDiB,KAAK,CAAEC,KAAK,IAAK;MACdR,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEO,KAAK,CAAC,CAAC,CAAC;MAClDnB,gBAAgB,CAAC,KAAK,CAAC;MACvBK,YAAY,CAAC,iCAAiCc,KAAK,EAAE,CAAC;MACtDhB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;MACpBc,UAAU,CAAC,MAAMjB,gBAAgB,CAACC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC;EACV,CAAC;EAED,OAAO;IACHK,UAAU;IACVJ,WAAW;IACXE,SAAS;IACTL;EACJ,CAAC;AACL,CAAC;AAAAD,EAAA,CAhCKD,iBAAiB;AAkCvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}