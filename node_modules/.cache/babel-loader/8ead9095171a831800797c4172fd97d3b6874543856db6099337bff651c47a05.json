{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npatr\\\\Documents\\\\GitHub\\\\AutoBox18\\\\autobox\\\\src\\\\Components\\\\UI\\\\Forms\\\\FormForCall.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n\n// const FormForCall = ({ display }) => {\n//     const [sentName, setSentName] = useState();\n//     const [sentPhoneNumber, setSentPhoneNumber] = useState();\n//     const [errorState, setErrorState] = useState(false);\n//     const [errorMessage, setErrorMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const sentDatahandler = (e) => {\n//         e.preventDefault();\n\n//         const refNameValue = refName.current.value;\n//         const refPhoneValue = refPhone.current.value;\n\n//         const notEmpty = useValidForm(refNameValue);\n//         const correctPhoneNumber = useValidForm(refPhoneValue);\n\n//         // Имя\n//         if (!notEmpty) {\n//             setSentName(\"Пользователь не указал имя\");\n//         } else {\n//             setSentName(refNameValue);\n//         }\n\n//         // Номер телефона\n//         if (!correctPhoneNumber) {\n//             setErrorState(true);\n//             setErrorMessage(\"Укажите номер телефона\");\n//             return;\n//         } else {\n//             setErrorState(false);\n//             setErrorMessage(\"\");\n//             setSentPhoneNumber(refPhoneValue);\n//         }\n\n//         // Чек-бокс\n//         if (!correctPhoneNumber) {\n//             setErrorState(true);\n//             setIsChecked(false);\n//         } else {\n//             setErrorState(false);\n//             setIsChecked(true);\n//         }\n\n//         if (errorState) {\n//             console.log(\"Введены не все данные\");\n//             return;\n//         } else {\n//             console.log(`${sentName} ${sentPhoneNumber}`);\n//         }\n//     };\n\n//     return (\n//         <>\n//             {errorState && <ErrorPopup timeOut=\"5000\" message={errorMessage} />}\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"number\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport styles from \"./FormForCall.module.css\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\nimport useValidForm from \"../../../Hooks/useValidForm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormForCall = ({\n  display\n}) => {\n  _s();\n  const [sentName, setSentName] = useState(\"\");\n  const [sentPhoneNumber, setSentPhoneNumber] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  // \n  const dispatch = useDispatch();\n  const colorState = useSelector(state => state.changeColorState.colorState);\n  // \n\n  const [isChecked, setIsChecked] = useState(false);\n  const refName = useRef();\n  const refPhone = useRef();\n  const [refNameValue, setRefNameValue] = useState(\"\");\n  const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n  const {\n    notEmpty: isNameNotEmpty\n  } = useValidForm(refNameValue);\n  const {\n    correctPhoneNumber: isPhoneNumberValid\n  } = useValidForm(refPhoneValue);\n  useEffect(() => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  }, []);\n  const handleCheckboxChange = e => {\n    setIsChecked(e.target.checked);\n  };\n  const handleNameChange = () => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n  };\n  const handlePhoneChange = () => {\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  };\n  const sentDatahandler = e => {\n    e.preventDefault();\n    const newErrors = [];\n    if (!isNameNotEmpty) {\n      newErrors.push(\"Укажите имя\");\n    } else {\n      setSentName(refNameValue);\n    }\n    if (!isPhoneNumberValid) {\n      newErrors.push(\"Укажите номер телефона\");\n    }\n    if (!isChecked) {\n      newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n      setSuccessMessage(\"\");\n    } else {\n      setErrors([]);\n      setSentPhoneNumber(refPhoneValue);\n      setSuccessMessage(\"Успех, ожидайте, мы вам перезвоним\");\n      console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errors.map((error, index) => /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: error\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this)), successMessage && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(SuccessPopup, {\n        timeOut: \"5000\",\n        message: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      style: {\n        display: display\n      },\n      onSubmit: sentDatahandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u0418\\u041C\\u042F\",\n        type: \"text\",\n        name: \"text\",\n        className: \"input\",\n        ref: refName,\n        onChange: handleNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u041D\\u041E\\u041C\\u0415\\u0420 \\u0422\\u0415\\u041B\\u0415\\u0424\\u041E\\u041D\\u0410 *\",\n        type: \"text\",\n        name: \"number\",\n        className: \"input\",\n        ref: refPhone,\n        onChange: handlePhoneChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.privacyContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"privacy\",\n          checked: isChecked,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"privacy\",\n          className: styles.privacyText,\n          children: [\"\\u0441\\u043E\\u0433\\u043B\\u0430\\u0441\\u0435\\u043D \\u0441 \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/privacy-policy\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.spanColor,\n              children: \"\\u043F\\u043E\\u043B\\u0438\\u0442\\u0438\\u043A\\u043E\\u0439 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.submitButton,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"textWhiteSmall\",\n          children: \"\\u041E\\u0422\\u041F\\u0420\\u0410\\u0412\\u0418\\u0422\\u042C \\u0417\\u0410\\u042F\\u0412\\u041A\\u0423\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FormForCall, \"zw38UhZgKoWjqx2q8wT8VT1IWcQ=\", true, function () {\n  return [useValidForm, useValidForm];\n});\n_c = FormForCall;\nexport default FormForCall;\nvar _c;\n$RefreshReg$(_c, \"FormForCall\");","map":{"version":3,"names":["Link","styles","useRef","useState","useEffect","ErrorPopup","SuccessPopup","useValidForm","jsxDEV","_jsxDEV","Fragment","_Fragment","FormForCall","display","_s","sentName","setSentName","sentPhoneNumber","setSentPhoneNumber","errors","setErrors","successMessage","setSuccessMessage","dispatch","useDispatch","colorState","useSelector","state","changeColorState","isChecked","setIsChecked","refName","refPhone","refNameValue","setRefNameValue","refPhoneValue","setRefPhoneValue","notEmpty","isNameNotEmpty","correctPhoneNumber","isPhoneNumberValid","current","value","handleCheckboxChange","e","target","checked","handleNameChange","handlePhoneChange","sentDatahandler","preventDefault","newErrors","push","length","console","log","children","map","error","index","timeOut","message","fileName","_jsxFileName","lineNumber","columnNumber","className","form","style","onSubmit","placeholder","type","name","ref","onChange","privacyContainer","id","htmlFor","privacyText","to","spanColor","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Forms/FormForCall.js"],"sourcesContent":["// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [sentName, setSentName] = useState();\r\n//     const [sentPhoneNumber, setSentPhoneNumber] = useState();\r\n//     const [errorState, setErrorState] = useState(false);\r\n//     const [errorMessage, setErrorMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const sentDatahandler = (e) => {\r\n//         e.preventDefault();\r\n\r\n//         const refNameValue = refName.current.value;\r\n//         const refPhoneValue = refPhone.current.value;\r\n\r\n//         const notEmpty = useValidForm(refNameValue);\r\n//         const correctPhoneNumber = useValidForm(refPhoneValue);\r\n\r\n//         // Имя\r\n//         if (!notEmpty) {\r\n//             setSentName(\"Пользователь не указал имя\");\r\n//         } else {\r\n//             setSentName(refNameValue);\r\n//         }\r\n\r\n//         // Номер телефона\r\n//         if (!correctPhoneNumber) {\r\n//             setErrorState(true);\r\n//             setErrorMessage(\"Укажите номер телефона\");\r\n//             return;\r\n//         } else {\r\n//             setErrorState(false);\r\n//             setErrorMessage(\"\");\r\n//             setSentPhoneNumber(refPhoneValue);\r\n//         }\r\n\r\n//         // Чек-бокс\r\n//         if (!correctPhoneNumber) {\r\n//             setErrorState(true);\r\n//             setIsChecked(false);\r\n//         } else {\r\n//             setErrorState(false);\r\n//             setIsChecked(true);\r\n//         }\r\n\r\n//         if (errorState) {\r\n//             console.log(\"Введены не все данные\");\r\n//             return;\r\n//         } else {\r\n//             console.log(`${sentName} ${sentPhoneNumber}`);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             {errorState && <ErrorPopup timeOut=\"5000\" message={errorMessage} />}\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"number\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport styles from \"./FormForCall.module.css\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\nimport useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\nconst FormForCall = ({ display }) => {\r\n    const [sentName, setSentName] = useState(\"\");\r\n    const [sentPhoneNumber, setSentPhoneNumber] = useState(\"\");\r\n    const [errors, setErrors] = useState([]);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n    // \r\n    const dispatch = useDispatch();\r\n    const colorState = useSelector(state => state.changeColorState.colorState);\r\n    // \r\n\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    const refName = useRef();\r\n    const refPhone = useRef();\r\n\r\n    const [refNameValue, setRefNameValue] = useState(\"\");\r\n    const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n    const { notEmpty: isNameNotEmpty } = useValidForm(refNameValue);\r\n    const { correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue);\r\n\r\n    useEffect(() => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    }, []);\r\n\r\n    const handleCheckboxChange = (e) => {\r\n        setIsChecked(e.target.checked);\r\n    };\r\n\r\n    const handleNameChange = () => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n    };\r\n\r\n    const handlePhoneChange = () => {\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    };\r\n\r\n    const sentDatahandler = (e) => {\r\n        e.preventDefault();\r\n        const newErrors = [];\r\n\r\n        if (!isNameNotEmpty) {\r\n            newErrors.push(\"Укажите имя\");\r\n        } else {\r\n            setSentName(refNameValue);\r\n        }\r\n\r\n        if (!isPhoneNumberValid) {\r\n            newErrors.push(\"Укажите номер телефона\");\r\n        }\r\n\r\n        if (!isChecked) {\r\n            newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n        }\r\n\r\n        if (newErrors.length > 0) {\r\n            setErrors(newErrors);\r\n            setSuccessMessage(\"\");\r\n        } else {\r\n            setErrors([]);\r\n            setSentPhoneNumber(refPhoneValue);\r\n            setSuccessMessage(\"Успех, ожидайте, мы вам перезвоним\");\r\n            console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {errors.map((error, index) => (\r\n                <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n            ))}\r\n            {successMessage && \r\n            <>\r\n\r\n                <SuccessPopup timeOut=\"5000\" message={successMessage} />\r\n            </>}\r\n            <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"input\"\r\n                    ref={refName}\r\n                    onChange={handleNameChange}\r\n                />\r\n\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    className=\"input\"\r\n                    ref={refPhone}\r\n                    onChange={handlePhoneChange}\r\n                />\r\n\r\n                <div className={styles.privacyContainer}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"privacy\"\r\n                        checked={isChecked}\r\n                        onChange={handleCheckboxChange}\r\n                    />\r\n                    <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n                        согласен с <Link to=\"/privacy-policy\">\r\n                            <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n                        </Link>\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\" className={styles.submitButton}>\r\n                    <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormForCall;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}