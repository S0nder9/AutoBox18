{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n\n// const useHttp = (databaseLink, propertyObject) => {\n//     const [loader, setLoader] = useState(false);\n//     const [data, setData] = useState(null);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setLoader(true);\n//             try {\n//                 const options = {\n//                     method: propertyObject.method,\n//                     headers: propertyObject.headers || {},\n//                     mode: propertyObject.mode || \"cors\",\n//                     credentials: propertyObject.credentials || \"same-origin\",\n//                     cache: propertyObject.cache || \"default\",\n//                 };\n\n//                 if (propertyObject.method !== 'GET' && propertyObject.method !== 'HEAD') {\n//                     options.body = propertyObject.body || \"\";\n//                 }\n\n//                 const response = await fetch(databaseLink, options);\n\n//                 if (!response.ok) {\n//                     throw new Error(response.statusText || 'Unknown error occurred');\n//                 }\n\n//                 const data = await response.json();\n//                 setData(data);\n//             } catch (error) {\n//                 setError(error.message);\n//             } finally {\n//                 setLoader(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, []);\n\n//     return { data, loader, error };\n// };\n\n// export default useHttp;\n\nimport { useEffect, useState } from \"react\";\nimport { auth, signInAnonymously } from \".\";\nconst useHttp = (databaseLink, propertyObject) => {\n  _s();\n  const [loader, setLoader] = useState(false);\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoader(true);\n      try {\n        let token = null;\n\n        // Проверяем, есть ли текущий пользователь\n        if (auth.currentUser) {\n          token = await auth.currentUser.getIdToken();\n        } else {\n          // Если нет, выполняем анонимную авторизацию\n          token = await signInAnonymously();\n        }\n        const options = {\n          method: propertyObject.method,\n          headers: {\n            ...propertyObject.headers,\n            Authorization: `Bearer ${token}` // Добавляем токен в заголовок\n          },\n          mode: propertyObject.mode || \"cors\",\n          credentials: propertyObject.credentials || \"same-origin\",\n          cache: propertyObject.cache || \"default\"\n        };\n        if (propertyObject.method !== 'GET' && propertyObject.method !== 'HEAD') {\n          options.body = propertyObject.body || \"\";\n        }\n        const response = await fetch(databaseLink, options);\n        if (!response.ok) {\n          throw new Error(response.statusText || 'Unknown error occurred');\n        }\n        const data = await response.json();\n        setData(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchData();\n  }, [databaseLink, propertyObject]);\n  return {\n    data,\n    loader,\n    error\n  };\n};\n_s(useHttp, \"40SPso4DtdwHroEdPx64PwkbMo8=\");\nexport default useHttp;","map":{"version":3,"names":["useEffect","useState","auth","signInAnonymously","useHttp","databaseLink","propertyObject","_s","loader","setLoader","data","setData","error","setError","fetchData","token","currentUser","getIdToken","options","method","headers","Authorization","mode","credentials","cache","body","response","fetch","ok","Error","statusText","json","message"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useHttp.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n\n// const useHttp = (databaseLink, propertyObject) => {\n//     const [loader, setLoader] = useState(false);\n//     const [data, setData] = useState(null);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setLoader(true);\n//             try {\n//                 const options = {\n//                     method: propertyObject.method,\n//                     headers: propertyObject.headers || {},\n//                     mode: propertyObject.mode || \"cors\",\n//                     credentials: propertyObject.credentials || \"same-origin\",\n//                     cache: propertyObject.cache || \"default\",\n//                 };\n\n//                 if (propertyObject.method !== 'GET' && propertyObject.method !== 'HEAD') {\n//                     options.body = propertyObject.body || \"\";\n//                 }\n\n//                 const response = await fetch(databaseLink, options);\n\n//                 if (!response.ok) {\n//                     throw new Error(response.statusText || 'Unknown error occurred');\n//                 }\n\n//                 const data = await response.json();\n//                 setData(data);\n//             } catch (error) {\n//                 setError(error.message);\n//             } finally {\n//                 setLoader(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, []);\n\n//     return { data, loader, error };\n// };\n\n// export default useHttp;\n\nimport { useEffect, useState } from \"react\";\nimport { auth, signInAnonymously} from \".\"\n\nconst useHttp = (databaseLink, propertyObject) => {\n    const [loader, setLoader] = useState(false);\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoader(true);\n            try {\n                let token = null;\n\n                // Проверяем, есть ли текущий пользователь\n                if (auth.currentUser) {\n                    token = await auth.currentUser.getIdToken();\n                } else {\n                    // Если нет, выполняем анонимную авторизацию\n                    token = await signInAnonymously();\n                }\n\n                const options = {\n                    method: propertyObject.method,\n                    headers: {\n                        ...propertyObject.headers,\n                        Authorization: `Bearer ${token}`, // Добавляем токен в заголовок\n                    },\n                    mode: propertyObject.mode || \"cors\",\n                    credentials: propertyObject.credentials || \"same-origin\",\n                    cache: propertyObject.cache || \"default\",\n                };\n\n                if (propertyObject.method !== 'GET' && propertyObject.method !== 'HEAD') {\n                    options.body = propertyObject.body || \"\";\n                }\n\n                const response = await fetch(databaseLink, options);\n\n                if (!response.ok) {\n                    throw new Error(response.statusText || 'Unknown error occurred');\n                }\n\n                const data = await response.json();\n                setData(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoader(false);\n            }\n        };\n\n        fetchData();\n    }, [databaseLink, propertyObject]);\n\n    return { data, loader, error };\n};\n\nexport default useHttp;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,IAAI,EAAEC,iBAAiB,QAAO,GAAG;AAE1C,MAAMC,OAAO,GAAGA,CAACC,YAAY,EAAEC,cAAc,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZ,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1BL,SAAS,CAAC,IAAI,CAAC;MACf,IAAI;QACA,IAAIM,KAAK,GAAG,IAAI;;QAEhB;QACA,IAAIb,IAAI,CAACc,WAAW,EAAE;UAClBD,KAAK,GAAG,MAAMb,IAAI,CAACc,WAAW,CAACC,UAAU,CAAC,CAAC;QAC/C,CAAC,MAAM;UACH;UACAF,KAAK,GAAG,MAAMZ,iBAAiB,CAAC,CAAC;QACrC;QAEA,MAAMe,OAAO,GAAG;UACZC,MAAM,EAAEb,cAAc,CAACa,MAAM;UAC7BC,OAAO,EAAE;YACL,GAAGd,cAAc,CAACc,OAAO;YACzBC,aAAa,EAAE,UAAUN,KAAK,EAAE,CAAE;UACtC,CAAC;UACDO,IAAI,EAAEhB,cAAc,CAACgB,IAAI,IAAI,MAAM;UACnCC,WAAW,EAAEjB,cAAc,CAACiB,WAAW,IAAI,aAAa;UACxDC,KAAK,EAAElB,cAAc,CAACkB,KAAK,IAAI;QACnC,CAAC;QAED,IAAIlB,cAAc,CAACa,MAAM,KAAK,KAAK,IAAIb,cAAc,CAACa,MAAM,KAAK,MAAM,EAAE;UACrED,OAAO,CAACO,IAAI,GAAGnB,cAAc,CAACmB,IAAI,IAAI,EAAE;QAC5C;QAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACtB,YAAY,EAAEa,OAAO,CAAC;QAEnD,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAACH,QAAQ,CAACI,UAAU,IAAI,wBAAwB,CAAC;QACpE;QAEA,MAAMpB,IAAI,GAAG,MAAMgB,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCpB,OAAO,CAACD,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,QAAQ,CAACD,KAAK,CAACoB,OAAO,CAAC;MAC3B,CAAC,SAAS;QACNvB,SAAS,CAAC,KAAK,CAAC;MACpB;IACJ,CAAC;IAEDK,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACT,YAAY,EAAEC,cAAc,CAAC,CAAC;EAElC,OAAO;IAAEI,IAAI;IAAEF,MAAM;IAAEI;EAAM,CAAC;AAClC,CAAC;AAACL,EAAA,CArDIH,OAAO;AAuDb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}