{"ast":null,"code":"import{useEffect,useState}from\"react\";const useHttp=(databaseLink,propertyObject)=>{const[loader,setLoader]=useState(false);const[data,setData]=useState(null);const[error,setError]=useState(null);useEffect(()=>{const fetchData=async()=>{setLoader(true);try{const options={method:propertyObject.method,headers:propertyObject.headers||{},mode:propertyObject.mode||\"cors\",credentials:propertyObject.credentials||\"same-origin\",cache:propertyObject.cache||\"default\"};if(propertyObject.method!=='GET'&&propertyObject.method!=='HEAD'){options.body=propertyObject.body||\"\";}const response=await fetch(databaseLink,options);if(!response.ok){throw new Error(response.statusText||'Unknown error occurred');}const data=await response.json();setData(data);}catch(error){setError(error.message);}finally{setLoader(false);}};fetchData();},[]);return{data,loader,error};};export default useHttp;","map":{"version":3,"names":["useEffect","useState","useHttp","databaseLink","propertyObject","loader","setLoader","data","setData","error","setError","fetchData","options","method","headers","mode","credentials","cache","body","response","fetch","ok","Error","statusText","json","message"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useHttp.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useHttp = (databaseLink, propertyObject) => {\n    const [loader, setLoader] = useState(false);\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoader(true);\n            try {\n                const options = {\n                    method: propertyObject.method,\n                    headers: propertyObject.headers || {},\n                    mode: propertyObject.mode || \"cors\",\n                    credentials: propertyObject.credentials || \"same-origin\",\n                    cache: propertyObject.cache || \"default\",\n                };\n\n                if (propertyObject.method !== 'GET' && propertyObject.method !== 'HEAD') {\n                    options.body = propertyObject.body || \"\";\n                }\n\n                const response = await fetch(databaseLink, options);\n\n                if (!response.ok) {\n                    throw new Error(response.statusText || 'Unknown error occurred');\n                }\n\n                const data = await response.json();\n                setData(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoader(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    return { data, loader, error };\n};\n\nexport default useHttp;\n\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,KAAM,CAAAC,OAAO,CAAGA,CAACC,YAAY,CAAEC,cAAc,GAAK,CAC9C,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGL,QAAQ,CAAC,KAAK,CAAC,CAC3C,KAAM,CAACM,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACQ,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAExCD,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAW,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1BL,SAAS,CAAC,IAAI,CAAC,CACf,GAAI,CACA,KAAM,CAAAM,OAAO,CAAG,CACZC,MAAM,CAAET,cAAc,CAACS,MAAM,CAC7BC,OAAO,CAAEV,cAAc,CAACU,OAAO,EAAI,CAAC,CAAC,CACrCC,IAAI,CAAEX,cAAc,CAACW,IAAI,EAAI,MAAM,CACnCC,WAAW,CAAEZ,cAAc,CAACY,WAAW,EAAI,aAAa,CACxDC,KAAK,CAAEb,cAAc,CAACa,KAAK,EAAI,SACnC,CAAC,CAED,GAAIb,cAAc,CAACS,MAAM,GAAK,KAAK,EAAIT,cAAc,CAACS,MAAM,GAAK,MAAM,CAAE,CACrED,OAAO,CAACM,IAAI,CAAGd,cAAc,CAACc,IAAI,EAAI,EAAE,CAC5C,CAEA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACjB,YAAY,CAAES,OAAO,CAAC,CAEnD,GAAI,CAACO,QAAQ,CAACE,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAACH,QAAQ,CAACI,UAAU,EAAI,wBAAwB,CAAC,CACpE,CAEA,KAAM,CAAAhB,IAAI,CAAG,KAAM,CAAAY,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClChB,OAAO,CAACD,IAAI,CAAC,CACjB,CAAE,MAAOE,KAAK,CAAE,CACZC,QAAQ,CAACD,KAAK,CAACgB,OAAO,CAAC,CAC3B,CAAC,OAAS,CACNnB,SAAS,CAAC,KAAK,CAAC,CACpB,CACJ,CAAC,CAEDK,SAAS,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEJ,IAAI,CAAEF,MAAM,CAAEI,KAAM,CAAC,CAClC,CAAC,CAED,cAAe,CAAAP,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}