{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// const useValidForm = (valueVariable, minLen = 0, maxLen = Infinity, minUpper = 0, minLower = 0, minDigits = 0) => {\n//   // Проверка на пустую строку\n//   const [notEmpty, setNotEmpty] = useState(false);\n//   // Проверка номера телефона\n//   const [correctPhoneNumber, setCorrectPhoneNumber] = useState(false);\n//   // Проверка email\n//   const [correctEmail, setCorrectEmail] = useState(false);\n//   // Проверка на наличие заглавных букв\n//   const [hasEnoughUpperCase, setHasEnoughUpperCase] = useState(false);\n//   // Проверка на наличие строчных букв\n//   const [hasEnoughLowerCase, setHasEnoughLowerCase] = useState(false);\n//   // Проверка на наличие специального символа\n//   const [hasSpecialChar, setHasSpecialChar] = useState(false);\n//   // Проверка на минимальную длину строки\n//   const [minLength, setMinLength] = useState(false);\n//   // Проверка на максимальную длину строки\n//   const [maxLength, setMaxLength] = useState(false);\n//   // Проверка на наличие цифр\n//   const [hasEnoughDigits, setHasEnoughDigits] = useState(false);\n//   useEffect(() => {\n//     const trimmedValue = valueVariable.trim();\n//     // Проверка на пустую строку\n//     setNotEmpty(trimmedValue.length > 0);\n//     // Проверка номера телефона (должен содержать цифры)\n//     const phoneNumberPattern = /\\d/;\n//     setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));\n//     // Проверка email\n//     const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     setCorrectEmail(emailPattern.test(trimmedValue));\n//     // Проверка на наличие заглавных букв\n//     const upperCaseCount = (trimmedValue.match(/[A-Z]/g) || []).length;\n//     setHasEnoughUpperCase(upperCaseCount >= minUpper);\n//     // Проверка на наличие строчных букв\n//     const lowerCaseCount = (trimmedValue.match(/[a-z]/g) || []).length;\n//     setHasEnoughLowerCase(lowerCaseCount >= minLower);\n//     // Проверка на наличие специального символа\n//     const specialCharPattern = /[!@#$%^&*(),.?\":{}|<>]/;\n//     setHasSpecialChar(specialCharPattern.test(trimmedValue));\n//     // Проверка на минимальную длину строки\n//     setMinLength(trimmedValue.length >= minLen);\n//     // Проверка на максимальную длину строки\n//     setMaxLength(trimmedValue.length <= maxLen);\n//     // Проверка на наличие цифр\n//     const digitCount = (trimmedValue.match(/\\d/g) || []).length;\n//     setHasEnoughDigits(digitCount >= minDigits);\n//   }, [valueVariable, minLen, maxLen, minUpper, minLower, minDigits]);\n//   return {\n//     notEmpty,\n//     correctPhoneNumber,\n//     correctEmail,\n//     hasEnoughUpperCase,\n//     hasEnoughLowerCase,\n//     hasSpecialChar,\n//     minLength,\n//     maxLength,\n//     hasEnoughDigits\n//   };\n// };\n// export default useValidForm;\nimport{useState,useEffect}from\"react\";const useValidForm=function(valueVariable){let minLen=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let maxLen=arguments.length>2&&arguments[2]!==undefined?arguments[2]:Infinity;let minUpper=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;let minLower=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;let minDigits=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0;const[notEmpty,setNotEmpty]=useState(false);const[correctPhoneNumber,setCorrectPhoneNumber]=useState(false);const[correctEmail,setCorrectEmail]=useState(false);const[hasEnoughUpperCase,setHasEnoughUpperCase]=useState(false);const[hasEnoughLowerCase,setHasEnoughLowerCase]=useState(false);const[hasSpecialChar,setHasSpecialChar]=useState(false);const[minLength,setMinLength]=useState(false);const[maxLength,setMaxLength]=useState(false);const[hasEnoughDigits,setHasEnoughDigits]=useState(false);useEffect(()=>{const trimmedValue=valueVariable.trim();setNotEmpty(trimmedValue.length>0);const phoneNumberPattern=/^\\d+$/;setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));const emailPattern=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;setCorrectEmail(emailPattern.test(trimmedValue));const upperCaseCount=(trimmedValue.match(/[A-Z]/g)||[]).length;setHasEnoughUpperCase(upperCaseCount>=minUpper);const lowerCaseCount=(trimmedValue.match(/[a-z]/g)||[]).length;setHasEnoughLowerCase(lowerCaseCount>=minLower);const specialCharPattern=/[!@#$%^&*(),.?\":{}|<>]/;setHasSpecialChar(specialCharPattern.test(trimmedValue));setMinLength(trimmedValue.length>=minLen);setMaxLength(trimmedValue.length<=maxLen);const digitCount=(trimmedValue.match(/\\d/g)||[]).length;setHasEnoughDigits(digitCount>=minDigits);},[valueVariable,minLen,maxLen,minUpper,minLower,minDigits]);return{notEmpty,correctPhoneNumber,correctEmail,hasEnoughUpperCase,hasEnoughLowerCase,hasSpecialChar,minLength,maxLength,hasEnoughDigits};};export default useValidForm;","map":{"version":3,"names":["useState","useEffect","useValidForm","valueVariable","minLen","arguments","length","undefined","maxLen","Infinity","minUpper","minLower","minDigits","notEmpty","setNotEmpty","correctPhoneNumber","setCorrectPhoneNumber","correctEmail","setCorrectEmail","hasEnoughUpperCase","setHasEnoughUpperCase","hasEnoughLowerCase","setHasEnoughLowerCase","hasSpecialChar","setHasSpecialChar","minLength","setMinLength","maxLength","setMaxLength","hasEnoughDigits","setHasEnoughDigits","trimmedValue","trim","phoneNumberPattern","test","emailPattern","upperCaseCount","match","lowerCaseCount","specialCharPattern","digitCount"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useValidForm.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// const useValidForm = (valueVariable, minLen = 0, maxLen = Infinity, minUpper = 0, minLower = 0, minDigits = 0) => {\n//   // Проверка на пустую строку\n//   const [notEmpty, setNotEmpty] = useState(false);\n\n//   // Проверка номера телефона\n//   const [correctPhoneNumber, setCorrectPhoneNumber] = useState(false);\n\n//   // Проверка email\n//   const [correctEmail, setCorrectEmail] = useState(false);\n\n//   // Проверка на наличие заглавных букв\n//   const [hasEnoughUpperCase, setHasEnoughUpperCase] = useState(false);\n\n//   // Проверка на наличие строчных букв\n//   const [hasEnoughLowerCase, setHasEnoughLowerCase] = useState(false);\n\n//   // Проверка на наличие специального символа\n//   const [hasSpecialChar, setHasSpecialChar] = useState(false);\n\n//   // Проверка на минимальную длину строки\n//   const [minLength, setMinLength] = useState(false);\n\n//   // Проверка на максимальную длину строки\n//   const [maxLength, setMaxLength] = useState(false);\n\n//   // Проверка на наличие цифр\n//   const [hasEnoughDigits, setHasEnoughDigits] = useState(false);\n\n//   useEffect(() => {\n//     const trimmedValue = valueVariable.trim();\n\n//     // Проверка на пустую строку\n//     setNotEmpty(trimmedValue.length > 0);\n\n//     // Проверка номера телефона (должен содержать цифры)\n//     const phoneNumberPattern = /\\d/;\n//     setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));\n\n//     // Проверка email\n//     const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     setCorrectEmail(emailPattern.test(trimmedValue));\n\n//     // Проверка на наличие заглавных букв\n//     const upperCaseCount = (trimmedValue.match(/[A-Z]/g) || []).length;\n//     setHasEnoughUpperCase(upperCaseCount >= minUpper);\n\n//     // Проверка на наличие строчных букв\n//     const lowerCaseCount = (trimmedValue.match(/[a-z]/g) || []).length;\n//     setHasEnoughLowerCase(lowerCaseCount >= minLower);\n\n//     // Проверка на наличие специального символа\n//     const specialCharPattern = /[!@#$%^&*(),.?\":{}|<>]/;\n//     setHasSpecialChar(specialCharPattern.test(trimmedValue));\n\n//     // Проверка на минимальную длину строки\n//     setMinLength(trimmedValue.length >= minLen);\n\n//     // Проверка на максимальную длину строки\n//     setMaxLength(trimmedValue.length <= maxLen);\n\n//     // Проверка на наличие цифр\n//     const digitCount = (trimmedValue.match(/\\d/g) || []).length;\n//     setHasEnoughDigits(digitCount >= minDigits);\n\n//   }, [valueVariable, minLen, maxLen, minUpper, minLower, minDigits]);\n\n//   return {\n//     notEmpty,\n//     correctPhoneNumber,\n//     correctEmail,\n//     hasEnoughUpperCase,\n//     hasEnoughLowerCase,\n//     hasSpecialChar,\n//     minLength,\n//     maxLength,\n//     hasEnoughDigits\n//   };\n// };\n\n// export default useValidForm;\n\n\nimport { useState, useEffect } from \"react\";\n\nconst useValidForm = (valueVariable, minLen = 0, maxLen = Infinity, minUpper = 0, minLower = 0, minDigits = 0) => {\n    const [notEmpty, setNotEmpty] = useState(false);\n    const [correctPhoneNumber, setCorrectPhoneNumber] = useState(false);\n    const [correctEmail, setCorrectEmail] = useState(false);\n    const [hasEnoughUpperCase, setHasEnoughUpperCase] = useState(false);\n    const [hasEnoughLowerCase, setHasEnoughLowerCase] = useState(false);\n    const [hasSpecialChar, setHasSpecialChar] = useState(false);\n    const [minLength, setMinLength] = useState(false);\n    const [maxLength, setMaxLength] = useState(false);\n    const [hasEnoughDigits, setHasEnoughDigits] = useState(false);\n\n    useEffect(() => {\n        const trimmedValue = valueVariable.trim();\n        setNotEmpty(trimmedValue.length > 0);\n        const phoneNumberPattern = /^\\d+$/;\n        setCorrectPhoneNumber(phoneNumberPattern.test(trimmedValue));\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        setCorrectEmail(emailPattern.test(trimmedValue));\n        const upperCaseCount = (trimmedValue.match(/[A-Z]/g) || []).length;\n        setHasEnoughUpperCase(upperCaseCount >= minUpper);\n        const lowerCaseCount = (trimmedValue.match(/[a-z]/g) || []).length;\n        setHasEnoughLowerCase(lowerCaseCount >= minLower);\n        const specialCharPattern = /[!@#$%^&*(),.?\":{}|<>]/;\n        setHasSpecialChar(specialCharPattern.test(trimmedValue));\n        setMinLength(trimmedValue.length >= minLen);\n        setMaxLength(trimmedValue.length <= maxLen);\n        const digitCount = (trimmedValue.match(/\\d/g) || []).length;\n        setHasEnoughDigits(digitCount >= minDigits);\n    }, [valueVariable, minLen, maxLen, minUpper, minLower, minDigits]);\n\n    return {\n        notEmpty,\n        correctPhoneNumber,\n        correctEmail,\n        hasEnoughUpperCase,\n        hasEnoughLowerCase,\n        hasSpecialChar,\n        minLength,\n        maxLength,\n        hasEnoughDigits\n    };\n};\n\nexport default useValidForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}