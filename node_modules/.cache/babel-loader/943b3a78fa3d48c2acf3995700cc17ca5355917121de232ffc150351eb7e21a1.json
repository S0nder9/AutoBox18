{"ast":null,"code":"import{useState,useEffect}from'react';const useHideHeader=()=>{const[isScrolled,setIsScrolled]=useState(false);useEffect(()=>{const handleScroll=()=>{if(window.scrollY>50){setIsScrolled(true);}else{setIsScrolled(false);}};window.addEventListener('scroll',handleScroll);return()=>{window.removeEventListener('scroll',handleScroll);};},[]);return isScrolled;};export default useHideHeader;","map":{"version":3,"names":["useState","useEffect","useHideHeader","isScrolled","setIsScrolled","handleScroll","window","scrollY","addEventListener","removeEventListener"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useHideHeader.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useHideHeader = () => {\n    const [isScrolled, setIsScrolled] = useState(false);\n\n    useEffect(() => {\n        const handleScroll = () => {\n            if (window.scrollY > 50) {\n                setIsScrolled(true);\n            } else {\n                setIsScrolled(false);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, []);\n\n    return isScrolled;\n}\n\nexport default useHideHeader;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACxB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGJ,QAAQ,CAAC,KAAK,CAAC,CAEnDC,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAI,YAAY,CAAGA,CAAA,GAAM,CACvB,GAAIC,MAAM,CAACC,OAAO,CAAG,EAAE,CAAE,CACrBH,aAAa,CAAC,IAAI,CAAC,CACvB,CAAC,IAAM,CACHA,aAAa,CAAC,KAAK,CAAC,CACxB,CACJ,CAAC,CAEDE,MAAM,CAACE,gBAAgB,CAAC,QAAQ,CAAEH,YAAY,CAAC,CAC/C,MAAO,IAAM,CACTC,MAAM,CAACG,mBAAmB,CAAC,QAAQ,CAAEJ,YAAY,CAAC,CACtD,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAF,UAAU,CACrB,CAAC,CAED,cAAe,CAAAD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}