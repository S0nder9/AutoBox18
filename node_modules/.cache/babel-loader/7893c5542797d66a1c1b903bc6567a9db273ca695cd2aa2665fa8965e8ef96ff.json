{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npatr\\\\Documents\\\\GitHub\\\\AutoBox18\\\\autobox\\\\src\\\\Components\\\\UI\\\\Text\\\\HeavyTextGray.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeavyTextGray = props => {\n  _s();\n  const initialFontSize = parseInt(props.fontSize, 10) || 30;\n  const initialMargin = parseInt(props.margin, 10) || 0;\n  const [fontSize, setFontSize] = useState(initialFontSize);\n  const [margin, setMargin] = useState(initialMargin);\n  const color = props.color || \"white\";\n  const className = props.className || \"HeavyTextGray\";\n  const adjustSizes = width => {\n    if (width >= 2500) {\n      const diff = Math.floor((width - 2500) / 100);\n      setFontSize(initialFontSize + diff);\n      setMargin(initialMargin + diff * 0.2);\n    } else {\n      const diff = Math.floor((2500 - width) / 100);\n      setFontSize(initialFontSize - diff);\n      setMargin(initialMargin - diff * 0.2);\n    }\n    console.log(`Width: ${width}, Font Size: ${fontSize}px, Margin: ${margin}px`);\n  };\n  useEffect(() => {\n    const handleResize = () => {\n      adjustSizes(window.innerWidth);\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [initialFontSize, initialMargin]);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: className,\n    style: {\n      fontSize: `${fontSize}px`,\n      color: color,\n      margin: `${margin}px`\n    },\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(HeavyTextGray, \"F1gY0bxXHCVMKq12qmoTOeNZtXM=\");\n_c = HeavyTextGray;\nexport default HeavyTextGray;\nvar _c;\n$RefreshReg$(_c, \"HeavyTextGray\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","HeavyTextGray","props","_s","initialFontSize","parseInt","fontSize","initialMargin","margin","setFontSize","setMargin","color","className","adjustSizes","width","diff","Math","floor","console","log","handleResize","window","innerWidth","addEventListener","removeEventListener","style","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Text/HeavyTextGray.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst HeavyTextGray = (props) => {\n    const initialFontSize = parseInt(props.fontSize, 10) || 30;\n    const initialMargin = parseInt(props.margin, 10) || 0;\n\n    const [fontSize, setFontSize] = useState(initialFontSize);\n    const [margin, setMargin] = useState(initialMargin);\n    const color = props.color || \"white\";\n    const className = props.className || \"HeavyTextGray\";\n\n    const adjustSizes = (width) => {\n        if (width >= 2500) {\n            const diff = Math.floor((width - 2500) / 100);\n            setFontSize(initialFontSize + diff);\n            setMargin(initialMargin + diff * 0.2);\n        } else {\n            const diff = Math.floor((2500 - width) / 100);\n            setFontSize(initialFontSize - diff);\n            setMargin(initialMargin - diff * 0.2);\n        }\n        console.log(`Width: ${width}, Font Size: ${fontSize}px, Margin: ${margin}px`);\n    };\n\n    useEffect(() => {\n        const handleResize = () => {\n            adjustSizes(window.innerWidth);\n        };\n\n        handleResize();\n        window.addEventListener('resize', handleResize);\n        \n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [initialFontSize, initialMargin]);\n\n    return (\n        <p\n            className={className}\n            style={{\n                fontSize: `${fontSize}px`,\n                color: color,\n                margin: `${margin}px`\n            }}\n        >\n            {props.text}\n        </p>\n    );\n}\n\nexport default HeavyTextGray;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B,MAAMC,eAAe,GAAGC,QAAQ,CAACH,KAAK,CAACI,QAAQ,EAAE,EAAE,CAAC,IAAI,EAAE;EAC1D,MAAMC,aAAa,GAAGF,QAAQ,CAACH,KAAK,CAACM,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC;EAErD,MAAM,CAACF,QAAQ,EAAEG,WAAW,CAAC,GAAGZ,QAAQ,CAACO,eAAe,CAAC;EACzD,MAAM,CAACI,MAAM,EAAEE,SAAS,CAAC,GAAGb,QAAQ,CAACU,aAAa,CAAC;EACnD,MAAMI,KAAK,GAAGT,KAAK,CAACS,KAAK,IAAI,OAAO;EACpC,MAAMC,SAAS,GAAGV,KAAK,CAACU,SAAS,IAAI,eAAe;EAEpD,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC3B,IAAIA,KAAK,IAAI,IAAI,EAAE;MACf,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,KAAK,GAAG,IAAI,IAAI,GAAG,CAAC;MAC7CL,WAAW,CAACL,eAAe,GAAGW,IAAI,CAAC;MACnCL,SAAS,CAACH,aAAa,GAAGQ,IAAI,GAAG,GAAG,CAAC;IACzC,CAAC,MAAM;MACH,MAAMA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAC,CAAC,IAAI,GAAGH,KAAK,IAAI,GAAG,CAAC;MAC7CL,WAAW,CAACL,eAAe,GAAGW,IAAI,CAAC;MACnCL,SAAS,CAACH,aAAa,GAAGQ,IAAI,GAAG,GAAG,CAAC;IACzC;IACAG,OAAO,CAACC,GAAG,CAAC,UAAUL,KAAK,gBAAgBR,QAAQ,eAAeE,MAAM,IAAI,CAAC;EACjF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACZ,MAAMsB,YAAY,GAAGA,CAAA,KAAM;MACvBP,WAAW,CAACQ,MAAM,CAACC,UAAU,CAAC;IAClC,CAAC;IAEDF,YAAY,CAAC,CAAC;IACdC,MAAM,CAACE,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IAE/C,OAAO,MAAM;MACTC,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IACtD,CAAC;EACL,CAAC,EAAE,CAAChB,eAAe,EAAEG,aAAa,CAAC,CAAC;EAEpC,oBACIP,OAAA;IACIY,SAAS,EAAEA,SAAU;IACrBa,KAAK,EAAE;MACHnB,QAAQ,EAAE,GAAGA,QAAQ,IAAI;MACzBK,KAAK,EAAEA,KAAK;MACZH,MAAM,EAAE,GAAGA,MAAM;IACrB,CAAE;IAAAkB,QAAA,EAEDxB,KAAK,CAACyB;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEZ,CAAC;AAAA5B,EAAA,CA/CKF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}