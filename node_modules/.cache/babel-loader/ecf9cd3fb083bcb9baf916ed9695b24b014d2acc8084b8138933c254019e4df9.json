{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npatr\\\\Documents\\\\GitHub\\\\AutoBox18\\\\autobox\\\\src\\\\Components\\\\UI\\\\Forms\\\\FormForCall.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState, useEffect } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n\n// const FormForCall = ({ display }) => {\n//     const [errors, setErrors] = useState([]);\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const [refNameValue, setRefNameValue] = useState(\"\");\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n\n//     useEffect(() => {\n//         if (refName.current) {\n//             setRefNameValue(refName.current.value);\n//         }\n//         if (refPhone.current) {\n//             setRefPhoneValue(refPhone.current.value);\n//         }\n//     }, [refName.current?.value, refPhone.current?.value]);\n\n//     // Обработчик изменения состояния чекбокса\n//     const handleCheckboxChange = (e) => {\n//         setIsChecked(e.target.checked);\n//     };\n\n//     // Проверяем данные и отправляем сообщение\n//     const sentDataHandler = (e) => {\n//         e.preventDefault();\n//         const newErrors = [];\n\n//         if (!isNameNotEmpty) {\n//             newErrors.push(\"Укажите имя\");\n//         }\n\n//         if (!isPhoneNumberValid) {\n//             newErrors.push(\"Укажите номер телефона\");\n//         }\n\n//         if (!isChecked) {\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n//         }\n\n//         if (newErrors.length > 0) {\n//             setErrors(newErrors);\n//             setSuccessMessage(\"\");\n//         } else {\n//             setErrors([]);\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n//             sentDataToTelegramHandler();\n//         }\n//     };\n\n//     const sentDataToTelegramHandler = async () => {\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\n//         const chatId = '1345888410';\n//         const text = `\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\n//         `;\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n\n//         try {\n//           const response = await fetch(url, {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//                 chat_id: chatId,\n//                 text: text,\n//                 parse_mode: 'HTML',\n//             }),\n//           });\n\n//           if (!response.ok) {\n//             setErrorStateForTg(true);\n//           } else {\n//             setErrorStateForTg(false);\n//           }\n//         } catch (error) {\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\n//           setErrorStateForTg(true);\n//         }\n//       };\n\n//     return (\n//         <>\n//             {errors.map((error, index) => (\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\n//             ))}\n\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\n\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                     onChange={() => setRefNameValue(refName.current.value)}\n//                     value={refNameValue}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"text\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\n//                     value={refPhoneValue}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                         onChange={handleCheckboxChange}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\nimport { Link } from \"react-router-dom\";\nimport styles from \"./FormForCall.module.css\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\nimport useValidForm from \"../../../Hooks/useValidForm\";\nimport useHttp from \"../../../Hooks/useHttp\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormForCall = ({\n  display\n}) => {\n  _s();\n  var _refName$current, _refPhone$current;\n  const [errors, setErrors] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(false);\n  const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n  const refName = useRef();\n  const refPhone = useRef();\n  const [refNameValue, setRefNameValue] = useState(\"\");\n  const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n  const {\n    notEmpty: isNameNotEmpty,\n    correctPhoneNumber: isPhoneNumberValid\n  } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n  useEffect(() => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  }, [(_refName$current = refName.current) === null || _refName$current === void 0 ? void 0 : _refName$current.value, (_refPhone$current = refPhone.current) === null || _refPhone$current === void 0 ? void 0 : _refPhone$current.value]);\n\n  // Обработчик изменения состояния чекбокса\n  const handleCheckboxChange = e => {\n    setIsChecked(e.target.checked);\n  };\n\n  // Проверяем данные и отправляем сообщение\n  const sentDataHandler = e => {\n    e.preventDefault();\n    const newErrors = [];\n    if (!isNameNotEmpty) {\n      newErrors.push(\"Укажите имя\");\n    }\n    if (!isPhoneNumberValid) {\n      newErrors.push(\"Укажите номер телефона\");\n    }\n    if (!isChecked) {\n      newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n      setSuccessMessage(\"\");\n    } else {\n      setErrors([]);\n      setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n      console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n      sentDataToTelegramHandler();\n    }\n  };\n  const {\n    data\n  } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {\n    method: \"GET\"\n  });\n  const botToken = data.ChatId;\n  const chatId = data.ChatId;\n  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n  const sentDataToTelegramHandler = async () => {\n    const text = `\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\n        <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n        <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\n        `;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chat_id: chatId,\n          text: text,\n          parse_mode: 'HTML',\n          reply_markup: {\n            inline_keyboard: [[{\n              text: 'Отметить',\n              callback_data: 'mark'\n            }]]\n          }\n        })\n      });\n      if (!response.ok) {\n        setErrorStateForTg(true);\n      } else {\n        setErrorStateForTg(false);\n      }\n    } catch (error) {\n      console.error('Ошибка при отправке сообщения в Telegram:', error);\n      setErrorStateForTg(true);\n    }\n  };\n  useEffect(() => {\n    const handleTelegramCallback = async update => {\n      if (update.callback_query && update.callback_query.data === 'mark') {\n        const message_id = update.callback_query.message.message_id;\n        const chat_id = update.callback_query.message.chat.id;\n        const url = `https://api.telegram.org/bot${botToken}/editMessageText`;\n        const text = `<b>У вас новая запись, перезвоните:</b>\\n\\n\n                <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\n                <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\\n\\n\n                <span style=\"color:green;\">Отмечено</span>`;\n        try {\n          await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              chat_id: chat_id,\n              message_id: message_id,\n              text: text,\n              parse_mode: 'HTML'\n            })\n          });\n        } catch (error) {\n          console.error('Ошибка при обновлении сообщения в Telegram:', error);\n        }\n      }\n    };\n    const url = `https://api.telegram.org/bot${botToken}/getUpdates`;\n    const intervalId = setInterval(async () => {\n      try {\n        const response = await fetch(url);\n        const updates = await response.json();\n        if (updates.result.length > 0) {\n          updates.result.forEach(handleTelegramCallback);\n        }\n      } catch (error) {\n        console.error('Ошибка при получении обновлений из Telegram:', error);\n      }\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errors.map((error, index) => /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: error\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 17\n    }, this)), errorStateForTg && /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: \"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043A\\u0430\\u043A\\u0430\\u044F-\\u0442\\u043E \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 33\n    }, this), errorStateForTg === false && /*#__PURE__*/_jsxDEV(SuccessPopup, {\n      timeOut: \"5000\",\n      message: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      style: {\n        display: display\n      },\n      onSubmit: sentDataHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u0418\\u041C\\u042F\",\n        type: \"text\",\n        name: \"text\",\n        className: \"input\",\n        ref: refName,\n        onChange: () => setRefNameValue(refName.current.value),\n        value: refNameValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u041D\\u041E\\u041C\\u0415\\u0420 \\u0422\\u0415\\u041B\\u0415\\u0424\\u041E\\u041D\\u0410 *\",\n        type: \"text\",\n        name: \"number\",\n        className: \"input\",\n        ref: refPhone,\n        onChange: () => setRefPhoneValue(refPhone.current.value),\n        value: refPhoneValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.privacyContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"privacy\",\n          checked: isChecked,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"privacy\",\n          className: styles.privacyText,\n          children: [\"\\u0441\\u043E\\u0433\\u043B\\u0430\\u0441\\u0435\\u043D \\u0441 \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/privacy-policy\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.spanColor,\n              children: \"\\u043F\\u043E\\u043B\\u0438\\u0442\\u0438\\u043A\\u043E\\u0439 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.submitButton,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"textWhiteSmall\",\n          children: \"\\u041E\\u0422\\u041F\\u0420\\u0410\\u0412\\u0418\\u0422\\u042C \\u0417\\u0410\\u042F\\u0412\\u041A\\u0423\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FormForCall, \"3bSv6OMyanyzWbjB6wh1FQbjIjU=\", false, function () {\n  return [useValidForm, useHttp];\n});\n_c = FormForCall;\nexport default FormForCall;\nvar _c;\n$RefreshReg$(_c, \"FormForCall\");","map":{"version":3,"names":["Link","styles","useRef","useState","useEffect","ErrorPopup","SuccessPopup","useValidForm","useHttp","jsxDEV","_jsxDEV","Fragment","_Fragment","FormForCall","display","_s","_refName$current","_refPhone$current","errors","setErrors","successMessage","setSuccessMessage","isChecked","setIsChecked","errorStateForTg","setErrorStateForTg","undefined","refName","refPhone","refNameValue","setRefNameValue","refPhoneValue","setRefPhoneValue","notEmpty","isNameNotEmpty","correctPhoneNumber","isPhoneNumberValid","Infinity","current","value","handleCheckboxChange","e","target","checked","sentDataHandler","preventDefault","newErrors","push","length","console","log","sentDataToTelegramHandler","data","method","botToken","ChatId","chatId","url","text","response","fetch","headers","body","JSON","stringify","chat_id","parse_mode","reply_markup","inline_keyboard","callback_data","ok","error","handleTelegramCallback","update","callback_query","message_id","message","chat","id","intervalId","setInterval","updates","json","result","forEach","clearInterval","children","map","index","timeOut","fileName","_jsxFileName","lineNumber","columnNumber","className","form","style","onSubmit","placeholder","type","name","ref","onChange","privacyContainer","htmlFor","privacyText","to","spanColor","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Forms/FormForCall.js"],"sourcesContent":["// import { Link } from \"react-router-dom\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [errors, setErrors] = useState([]);\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const [refNameValue, setRefNameValue] = useState(\"\");\r\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n//     useEffect(() => {\r\n//         if (refName.current) {\r\n//             setRefNameValue(refName.current.value);\r\n//         }\r\n//         if (refPhone.current) {\r\n//             setRefPhoneValue(refPhone.current.value);\r\n//         }\r\n//     }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n//     // Обработчик изменения состояния чекбокса\r\n//     const handleCheckboxChange = (e) => {\r\n//         setIsChecked(e.target.checked);\r\n//     };\r\n\r\n//     // Проверяем данные и отправляем сообщение\r\n//     const sentDataHandler = (e) => {\r\n//         e.preventDefault();\r\n//         const newErrors = [];\r\n\r\n//         if (!isNameNotEmpty) {\r\n//             newErrors.push(\"Укажите имя\");\r\n//         }\r\n\r\n//         if (!isPhoneNumberValid) {\r\n//             newErrors.push(\"Укажите номер телефона\");\r\n//         }\r\n\r\n//         if (!isChecked) {\r\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n//         }\r\n\r\n//         if (newErrors.length > 0) {\r\n//             setErrors(newErrors);\r\n//             setSuccessMessage(\"\");\r\n//         } else {\r\n//             setErrors([]);\r\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n//             sentDataToTelegramHandler();\r\n//         }\r\n//     };\r\n\r\n//     const sentDataToTelegramHandler = async () => {\r\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\r\n//         const chatId = '1345888410';\r\n//         const text = `\r\n//         <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n//         <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n//         <b>Номер телефона:</b> ${refPhoneValue || 'Не указан'}\r\n//         `;\r\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n      \r\n//         try {\r\n//           const response = await fetch(url, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 chat_id: chatId,\r\n//                 text: text,\r\n//                 parse_mode: 'HTML',\r\n//             }),\r\n//           });\r\n      \r\n//           if (!response.ok) {\r\n//             setErrorStateForTg(true);\r\n//           } else {\r\n//             setErrorStateForTg(false);\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n//           setErrorStateForTg(true);\r\n//         }\r\n//       };\r\n      \r\n\r\n//     return (\r\n//         <>\r\n//             {errors.map((error, index) => (\r\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n//             ))}\r\n            \r\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                     onChange={() => setRefNameValue(refName.current.value)}\r\n//                     value={refNameValue}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"text\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n//                     value={refPhoneValue}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                         onChange={handleCheckboxChange}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./FormForCall.module.css\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\nimport useValidForm from \"../../../Hooks/useValidForm\"\r\nimport useHttp from \"../../../Hooks/useHttp\";\r\n\r\nconst FormForCall = ({ display }) => {\r\n    const [errors, setErrors] = useState([]);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n    const refName = useRef();\r\n    const refPhone = useRef();\r\n\r\n    const [refNameValue, setRefNameValue] = useState(\"\");\r\n    const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n    const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n    useEffect(() => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n    // Обработчик изменения состояния чекбокса\r\n    const handleCheckboxChange = (e) => {\r\n        setIsChecked(e.target.checked);\r\n    };\r\n\r\n    // Проверяем данные и отправляем сообщение\r\n    const sentDataHandler = (e) => {\r\n        e.preventDefault();\r\n        const newErrors = [];\r\n\r\n        if (!isNameNotEmpty) {\r\n            newErrors.push(\"Укажите имя\");\r\n        }\r\n\r\n        if (!isPhoneNumberValid) {\r\n            newErrors.push(\"Укажите номер телефона\");\r\n        }\r\n\r\n        if (!isChecked) {\r\n            newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n        }\r\n\r\n        if (newErrors.length > 0) {\r\n            setErrors(newErrors);\r\n            setSuccessMessage(\"\");\r\n        } else {\r\n            setErrors([]);\r\n            setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n            console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n            sentDataToTelegramHandler();\r\n        }\r\n    };\r\n\r\n    const { data } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {method: \"GET\"})\r\n    const botToken = data.ChatId;\r\n    const chatId = data.ChatId;\r\n    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n\r\n    const sentDataToTelegramHandler = async () => {\r\n        \r\n        \r\n        const text = `\r\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n        <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n        <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\r\n        `;\r\n\r\n        \r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    chat_id: chatId,\r\n                    text: text,\r\n                    parse_mode: 'HTML',\r\n                    reply_markup: {\r\n                        inline_keyboard: [[\r\n                            {\r\n                                text: 'Отметить',\r\n                                callback_data: 'mark'\r\n                            }\r\n                        ]]\r\n                    }\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                setErrorStateForTg(true);\r\n            } else {\r\n                setErrorStateForTg(false);\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n            setErrorStateForTg(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleTelegramCallback = async (update) => {\r\n            if (update.callback_query && update.callback_query.data === 'mark') {\r\n                const message_id = update.callback_query.message.message_id;\r\n                const chat_id = update.callback_query.message.chat.id;\r\n\r\n                const url = `https://api.telegram.org/bot${botToken}/editMessageText`;\r\n                const text = `<b>У вас новая запись, перезвоните:</b>\\n\\n\r\n                <b>Имя:</b> ${refNameValue || 'Не указано'}\\n\r\n                <b>Номер телефона:</b> <a href=\"tel:${refPhoneValue}\">${refPhoneValue || 'Не указан'}</a>\\n\\n\r\n                <span style=\"color:green;\">Отмечено</span>`;\r\n\r\n                try {\r\n                    await fetch(url, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({\r\n                            chat_id: chat_id,\r\n                            message_id: message_id,\r\n                            text: text,\r\n                            parse_mode: 'HTML'\r\n                        })\r\n                    });\r\n                } catch (error) {\r\n                    console.error('Ошибка при обновлении сообщения в Telegram:', error);\r\n                }\r\n            }\r\n        };\r\n\r\n        const url = `https://api.telegram.org/bot${botToken}/getUpdates`;\r\n        const intervalId = setInterval(async () => {\r\n            try {\r\n                const response = await fetch(url);\r\n                const updates = await response.json();\r\n                if (updates.result.length > 0) {\r\n                    updates.result.forEach(handleTelegramCallback);\r\n                }\r\n            } catch (error) {\r\n                console.error('Ошибка при получении обновлений из Telegram:', error);\r\n            }\r\n        }, 5000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {errors.map((error, index) => (\r\n                <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n            ))}\r\n\r\n            {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n            {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n            <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"input\"\r\n                    ref={refName}\r\n                    onChange={() => setRefNameValue(refName.current.value)}\r\n                    value={refNameValue}\r\n                />\r\n\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    className=\"input\"\r\n                    ref={refPhone}\r\n                    onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n                    value={refPhoneValue}\r\n                />\r\n\r\n                <div className={styles.privacyContainer}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"privacy\"\r\n                        checked={isChecked}\r\n                        onChange={handleCheckboxChange}\r\n                    />\r\n                    <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n                        согласен с <Link to=\"/privacy-policy\">\r\n                            <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n                        </Link>\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\" className={styles.submitButton}>\r\n                    <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormForCall;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,SAASC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACnD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,OAAO,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,gBAAA,EAAAC,iBAAA;EACjC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}