{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npatr\\\\Documents\\\\GitHub\\\\AutoBox18\\\\autobox\\\\src\\\\Components\\\\UI\\\\Forms\\\\FormForCall.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n\n// const FormForCall = ({ display }) => {\n//     const [sentName, setSentName] = useState();\n//     const [sentPhoneNumber, setSentPhoneNumber] = useState();\n//     const [errorState, setErrorState] = useState(false);\n//     const [errorMessage, setErrorMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const sentDatahandler = (e) => {\n//         e.preventDefault();\n\n//         const refNameValue = refName.current.value;\n//         const refPhoneValue = refPhone.current.value;\n\n//         const notEmpty = useValidForm(refNameValue);\n//         const correctPhoneNumber = useValidForm(refPhoneValue);\n\n//         // Имя\n//         if (!notEmpty) {\n//             setSentName(\"Пользователь не указал имя\");\n//         } else {\n//             setSentName(refNameValue);\n//         }\n\n//         // Номер телефона\n//         if (!correctPhoneNumber) {\n//             setErrorState(true);\n//             setErrorMessage(\"Укажите номер телефона\");\n//             return;\n//         } else {\n//             setErrorState(false);\n//             setErrorMessage(\"\");\n//             setSentPhoneNumber(refPhoneValue);\n//         }\n\n//         // Чек-бокс\n//         if (!correctPhoneNumber) {\n//             setErrorState(true);\n//             setIsChecked(false);\n//         } else {\n//             setErrorState(false);\n//             setIsChecked(true);\n//         }\n\n//         if (errorState) {\n//             console.log(\"Введены не все данные\");\n//             return;\n//         } else {\n//             console.log(`${sentName} ${sentPhoneNumber}`);\n//         }\n//     };\n\n//     return (\n//         <>\n//             {errorState && <ErrorPopup timeOut=\"5000\" message={errorMessage} />}\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"number\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\nimport { Link } from \"react-router-dom\";\nimport styles from \"./FormForCall.module.css\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\nimport useValidForm from \"../../../Hooks/useValidForm\";\nimport useHttp from \"../../../Hooks/useHttp\";\nimport Loading from \"../LoadingGroup/Loading\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormForCall = ({\n  display\n}) => {\n  _s();\n  const [sentName, setSentName] = useState(\"\");\n  const [sentPhoneNumber, setSentPhoneNumber] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(false);\n  const refName = useRef();\n  const refPhone = useRef();\n\n  // Хук для получения данных из Firebase\n  const {\n    data,\n    loader,\n    error\n  } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/botToken.json\", {\n    method: \"GET\"\n  });\n\n  // Хук для валидации формы\n  const {\n    notEmpty: isNameNotEmpty,\n    correctPhoneNumber: isPhoneNumberValid\n  } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n  useEffect(() => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  }, []);\n\n  // Обработчик изменения состояния чекбокса\n  const handleCheckboxChange = e => {\n    setIsChecked(e.target.checked);\n  };\n\n  // Проверяем данные и отправляем сообщение\n  const sentDataHandler = async e => {\n    e.preventDefault();\n    const newErrors = [];\n\n    // Обновляем значения при отправке данных\n    const newNameValue = refName.current.value;\n    const newPhoneValue = refPhone.current.value;\n    setRefNameValue(newNameValue);\n    setRefPhoneValue(newPhoneValue);\n    if (!isNameNotEmpty) {\n      newErrors.push(\"Укажите имя\");\n    } else {\n      setSentName(newNameValue);\n    }\n    if (!isPhoneNumberValid) {\n      newErrors.push(\"Укажите номер телефона\");\n    } else {\n      setSentPhoneNumber(newPhoneValue);\n    }\n    if (!isChecked) {\n      newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n      setSuccessMessage(\"\");\n    } else {\n      var _data$BotToken, _data$BotToken2;\n      setErrors([]);\n      setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n      console.log(`Имя: ${sentName}, Номер телефона: ${sentPhoneNumber}`);\n      if (data !== null && data !== void 0 && (_data$BotToken = data.BotToken) !== null && _data$BotToken !== void 0 && _data$BotToken.Token && data !== null && data !== void 0 && (_data$BotToken2 = data.BotToken) !== null && _data$BotToken2 !== void 0 && _data$BotToken2.ChatId) {\n        await sendTelegramMessage(data.BotToken.Token, data.BotToken.ChatId, sentName, sentPhoneNumber);\n      }\n    }\n  };\n\n  // Функция отправки сообщения в Telegram\n  const sendTelegramMessage = async (botToken, chatId, name, phone) => {\n    const text = `\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\n        <b>Имя:</b> ${name || 'Не указано'}\\n\n        <b>Номер телефона:</b> ${phone || 'Не указан'}\n        `;\n    if (!text.trim()) {\n      console.error('Message text is empty');\n      return;\n    }\n    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        chat_id: chatId,\n        text: text,\n        parse_mode: 'HTML'\n      })\n    };\n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        throw new Error(response.statusText || 'Failed to send message');\n      }\n      console.log('Message sent successfully');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  if (loader) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 50\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorPopup, {\n    timeOut: \"5000\",\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errors.map((error, index) => /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: error\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }, this)), successMessage && /*#__PURE__*/_jsxDEV(SuccessPopup, {\n      timeOut: \"5000\",\n      message: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      style: {\n        display: display\n      },\n      onSubmit: sentDataHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u0418\\u041C\\u042F\",\n        type: \"text\",\n        name: \"text\",\n        className: \"input\",\n        ref: refName,\n        onChange: () => setRefNameValue(refName.current.value),\n        value: refNameValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u041D\\u041E\\u041C\\u0415\\u0420 \\u0422\\u0415\\u041B\\u0415\\u0424\\u041E\\u041D\\u0410 *\",\n        type: \"text\",\n        name: \"number\",\n        className: \"input\",\n        ref: refPhone,\n        onChange: () => setRefPhoneValue(refPhone.current.value),\n        value: refPhoneValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.privacyContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"privacy\",\n          checked: isChecked,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"privacy\",\n          className: styles.privacyText,\n          children: [\"\\u0441\\u043E\\u0433\\u043B\\u0430\\u0441\\u0435\\u043D \\u0441 \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/privacy-policy\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.spanColor,\n              children: \"\\u043F\\u043E\\u043B\\u0438\\u0442\\u0438\\u043A\\u043E\\u0439 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.submitButton,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"textWhiteSmall\",\n          children: \"\\u041E\\u0422\\u041F\\u0420\\u0410\\u0412\\u0418\\u0422\\u042C \\u0417\\u0410\\u042F\\u0412\\u041A\\u0423\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FormForCall, \"2xOH/Viz80YJIs5/eCDwAYpMf2o=\", false, function () {\n  return [useHttp, useValidForm];\n});\n_c = FormForCall;\nexport default FormForCall;\nvar _c;\n$RefreshReg$(_c, \"FormForCall\");","map":{"version":3,"names":["Link","styles","useRef","useState","useEffect","ErrorPopup","SuccessPopup","useValidForm","useHttp","Loading","jsxDEV","_jsxDEV","Fragment","_Fragment","FormForCall","display","_s","sentName","setSentName","sentPhoneNumber","setSentPhoneNumber","errors","setErrors","successMessage","setSuccessMessage","isChecked","setIsChecked","refName","refPhone","data","loader","error","method","notEmpty","isNameNotEmpty","correctPhoneNumber","isPhoneNumberValid","refPhoneValue","Infinity","current","setRefNameValue","value","setRefPhoneValue","handleCheckboxChange","e","target","checked","sentDataHandler","preventDefault","newErrors","newNameValue","newPhoneValue","push","length","_data$BotToken","_data$BotToken2","console","log","BotToken","Token","ChatId","sendTelegramMessage","botToken","chatId","name","phone","text","trim","url","options","headers","body","JSON","stringify","chat_id","parse_mode","response","fetch","ok","Error","statusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","timeOut","message","map","index","form","style","onSubmit","placeholder","type","ref","onChange","refNameValue","privacyContainer","id","htmlFor","privacyText","to","spanColor","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Forms/FormForCall.js"],"sourcesContent":["// import { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [sentName, setSentName] = useState();\r\n//     const [sentPhoneNumber, setSentPhoneNumber] = useState();\r\n//     const [errorState, setErrorState] = useState(false);\r\n//     const [errorMessage, setErrorMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const sentDatahandler = (e) => {\r\n//         e.preventDefault();\r\n\r\n//         const refNameValue = refName.current.value;\r\n//         const refPhoneValue = refPhone.current.value;\r\n\r\n//         const notEmpty = useValidForm(refNameValue);\r\n//         const correctPhoneNumber = useValidForm(refPhoneValue);\r\n\r\n//         // Имя\r\n//         if (!notEmpty) {\r\n//             setSentName(\"Пользователь не указал имя\");\r\n//         } else {\r\n//             setSentName(refNameValue);\r\n//         }\r\n\r\n//         // Номер телефона\r\n//         if (!correctPhoneNumber) {\r\n//             setErrorState(true);\r\n//             setErrorMessage(\"Укажите номер телефона\");\r\n//             return;\r\n//         } else {\r\n//             setErrorState(false);\r\n//             setErrorMessage(\"\");\r\n//             setSentPhoneNumber(refPhoneValue);\r\n//         }\r\n\r\n//         // Чек-бокс\r\n//         if (!correctPhoneNumber) {\r\n//             setErrorState(true);\r\n//             setIsChecked(false);\r\n//         } else {\r\n//             setErrorState(false);\r\n//             setIsChecked(true);\r\n//         }\r\n\r\n//         if (errorState) {\r\n//             console.log(\"Введены не все данные\");\r\n//             return;\r\n//         } else {\r\n//             console.log(`${sentName} ${sentPhoneNumber}`);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             {errorState && <ErrorPopup timeOut=\"5000\" message={errorMessage} />}\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDatahandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"number\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./FormForCall.module.css\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\nimport useValidForm from \"../../../Hooks/useValidForm\";\r\nimport useHttp from \"../../../Hooks/useHttp\";\r\nimport Loading from \"../LoadingGroup/Loading\";\r\n\r\nconst FormForCall = ({ display }) => {\r\n    const [sentName, setSentName] = useState(\"\");\r\n    const [sentPhoneNumber, setSentPhoneNumber] = useState(\"\");\r\n    const [errors, setErrors] = useState([]);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    const refName = useRef();\r\n    const refPhone = useRef();\r\n\r\n    // Хук для получения данных из Firebase\r\n    const { data, loader, error } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/botToken.json\", {\r\n        method: \"GET\"\r\n    });\r\n\r\n    // Хук для валидации формы\r\n    const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n    useEffect(() => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    }, []);\r\n\r\n    // Обработчик изменения состояния чекбокса\r\n    const handleCheckboxChange = (e) => {\r\n        setIsChecked(e.target.checked);\r\n    };\r\n\r\n    // Проверяем данные и отправляем сообщение\r\n    const sentDataHandler = async (e) => {\r\n        e.preventDefault();\r\n        const newErrors = [];\r\n\r\n        // Обновляем значения при отправке данных\r\n        const newNameValue = refName.current.value;\r\n        const newPhoneValue = refPhone.current.value;\r\n        setRefNameValue(newNameValue);\r\n        setRefPhoneValue(newPhoneValue);\r\n\r\n        if (!isNameNotEmpty) {\r\n            newErrors.push(\"Укажите имя\");\r\n        } else {\r\n            setSentName(newNameValue);\r\n        }\r\n\r\n        if (!isPhoneNumberValid) {\r\n            newErrors.push(\"Укажите номер телефона\");\r\n        } else {\r\n            setSentPhoneNumber(newPhoneValue);\r\n        }\r\n\r\n        if (!isChecked) {\r\n            newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n        }\r\n\r\n        if (newErrors.length > 0) {\r\n            setErrors(newErrors);\r\n            setSuccessMessage(\"\");\r\n        } else {\r\n            setErrors([]);\r\n            setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n            console.log(`Имя: ${sentName}, Номер телефона: ${sentPhoneNumber}`);\r\n            if (data?.BotToken?.Token && data?.BotToken?.ChatId) {\r\n                await sendTelegramMessage(data.BotToken.Token, data.BotToken.ChatId, sentName, sentPhoneNumber);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Функция отправки сообщения в Telegram\r\n    const sendTelegramMessage = async (botToken, chatId, name, phone) => {\r\n        const text = `\r\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n        <b>Имя:</b> ${name || 'Не указано'}\\n\r\n        <b>Номер телефона:</b> ${phone || 'Не указан'}\r\n        `;\r\n\r\n        if (!text.trim()) {\r\n            console.error('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                chat_id: chatId,\r\n                text: text,\r\n                parse_mode: 'HTML',\r\n            }),\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, options);\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText || 'Failed to send message');\r\n            }\r\n            console.log('Message sent successfully');\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n        }\r\n    };\r\n\r\n    if (loader) return <div className=\"centered\"><Loading/></div>;\r\n    if (error) return <ErrorPopup timeOut=\"5000\" message={error} />;\r\n\r\n    return (\r\n        <>\r\n            {errors.map((error, index) => (\r\n                <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n            ))}\r\n            {successMessage && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n            <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"input\"\r\n                    ref={refName}\r\n                    onChange={() => setRefNameValue(refName.current.value)}\r\n                    value={refNameValue}\r\n                />\r\n\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    className=\"input\"\r\n                    ref={refPhone}\r\n                    onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n                    value={refPhoneValue}\r\n                />\r\n\r\n                <div className={styles.privacyContainer}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"privacy\"\r\n                        checked={isChecked}\r\n                        onChange={handleCheckboxChange}\r\n                    />\r\n                    <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n                        согласен с <Link to=\"/privacy-policy\">\r\n                            <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n                        </Link>\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\" className={styles.submitButton}>\r\n                    <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormForCall;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}