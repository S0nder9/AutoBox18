{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npatr\\\\Documents\\\\GitHub\\\\AutoBox18\\\\autobox\\\\src\\\\Components\\\\UI\\\\Forms\\\\FormForCall.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\";\n// import styles from \"./FormForCall.module.css\";\n// import { useRef, useState, useEffect } from \"react\";\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\n// import useValidForm from \"../../../Hooks/useValidForm\";\n// import useHttp from \"../../../Hooks/useHttp\";\n// import Loading from \"../LoadingGroup/Loading\";\n\n// const FormForCall = ({ display }) => {\n//     const [errors, setErrors] = useState([]);\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [isChecked, setIsChecked] = useState(false);\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\n\n//     const refName = useRef();\n//     const refPhone = useRef();\n\n//     const [refNameValue, setRefNameValue] = useState(\"\");\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n\n//     useEffect(() => {\n//         if (refName.current) {\n//             setRefNameValue(refName.current.value);\n//         }\n//         if (refPhone.current) {\n//             setRefPhoneValue(refPhone.current.value);\n//         }\n//     }, [refName.current?.value, refPhone.current?.value]);\n\n//     // Обработчик изменения состояния чекбокса\n//     const handleCheckboxChange = (e) => {\n//         setIsChecked(e.target.checked);\n//     };\n\n//     // Проверяем данные и отправляем сообщение\n//     const sentDataHandler = (e) => {\n//         e.preventDefault();\n//         const newErrors = [];\n\n//         if (!isNameNotEmpty) {\n//             newErrors.push(\"Укажите имя\");\n//         }\n\n//         if (!isPhoneNumberValid) {\n//             newErrors.push(\"Укажите номер телефона\");\n//         }\n\n//         if (!isChecked) {\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n//         }\n\n//         if (newErrors.length > 0) {\n//             setErrors(newErrors);\n//             setSuccessMessage(\"\");\n//         } else {\n//             setErrors([]);\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n//             sentDataToTelegramHandler();\n//         }\n//     };\n\n//     const sentDataToTelegramHandler = async () => {\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\n//         const chatId = '1345888410';\n//         const text = `Имя: ${refNameValue}\\nСообщение: ${refPhoneValue.toString()}`;\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n\n//         try {\n//           const response = await fetch(url, {\n//             method: 'POST',\n//             headers: {\n//               'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({\n//               chat_id: chatId,\n//               text: text,\n//             }),\n//           });\n\n//           if (!response.ok) {\n//             setErrorStateForTg(true);\n//           } else {\n//             setErrorStateForTg(false);\n//           }\n//         } catch (error) {\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\n//           setErrorStateForTg(true);\n//         }\n//       };\n\n//     return (\n//         <>\n//             {errors.map((error, index) => (\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\n//             ))}\n\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\n\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\n//                     type=\"text\"\n//                     name=\"text\"\n//                     className=\"input\"\n//                     ref={refName}\n//                     onChange={() => setRefNameValue(refName.current.value)}\n//                     value={refNameValue}\n//                 />\n\n//                 <input\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\n//                     type=\"text\"\n//                     name=\"number\"\n//                     className=\"input\"\n//                     ref={refPhone}\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\n//                     value={refPhoneValue}\n//                 />\n\n//                 <div className={styles.privacyContainer}>\n//                     <input\n//                         type=\"checkbox\"\n//                         id=\"privacy\"\n//                         checked={isChecked}\n//                         onChange={handleCheckboxChange}\n//                     />\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\n//                         согласен с <Link to=\"/privacy-policy\">\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\n//                         </Link>\n//                     </label>\n//                 </div>\n\n//                 <button type=\"submit\" className={styles.submitButton}>\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\n//                 </button>\n//             </form>\n//         </>\n//     );\n// };\n\n// export default FormForCall;\n\nimport { Link } from \"react-router-dom\";\nimport styles from \"./FormForCall.module.css\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\nimport useValidForm from \"../../../Hooks/useValidForm\";\nimport useHttp from \"../../../Hooks/useHttp\";\nimport Loading from \"../LoadingGroup/Loading\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormForCall = ({\n  display\n}) => {\n  _s();\n  var _refName$current, _refPhone$current;\n  const [errors, setErrors] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(false);\n  const refName = useRef();\n  const refPhone = useRef();\n  const [refNameValue, setRefNameValue] = useState(\"\");\n  const [refPhoneValue, setRefPhoneValue] = useState(\"\");\n\n  // Хук для получения данных из Firebase\n  const {\n    data,\n    loader,\n    error\n  } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {\n    method: \"GET\"\n  });\n  const {\n    notEmpty: isNameNotEmpty,\n    correctPhoneNumber: isPhoneNumberValid\n  } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\n  useEffect(() => {\n    if (refName.current) {\n      setRefNameValue(refName.current.value);\n    }\n    if (refPhone.current) {\n      setRefPhoneValue(refPhone.current.value);\n    }\n  }, [(_refName$current = refName.current) === null || _refName$current === void 0 ? void 0 : _refName$current.value, (_refPhone$current = refPhone.current) === null || _refPhone$current === void 0 ? void 0 : _refPhone$current.value]);\n\n  // Обработчик изменения состояния чекбокса\n  const handleCheckboxChange = e => {\n    setIsChecked(e.target.checked);\n  };\n\n  // Проверяем данные и отправляем сообщение\n  const sentDataHandler = async e => {\n    e.preventDefault();\n    const newErrors = [];\n    if (!isNameNotEmpty) {\n      newErrors.push(\"Укажите имя\");\n    }\n    if (!isPhoneNumberValid) {\n      newErrors.push(\"Укажите номер телефона\");\n    }\n    if (!isChecked) {\n      newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n      setSuccessMessage(\"\");\n    } else {\n      var _data$Token;\n      setErrors([]);\n      setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\n      console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\n      // Извлечение Token и ChatId из data\n      const token = data === null || data === void 0 ? void 0 : (_data$Token = data.Token) === null || _data$Token === void 0 ? void 0 : _data$Token.split('/')[4]; // Извлечение Token из URL\n      const chatId = data === null || data === void 0 ? void 0 : data.ChatId; // Прямое использование числового ChatId\n\n      if (token && chatId) {\n        await sendTelegramMessage(token, chatId, refNameValue, refPhoneValue);\n      } else {\n        console.error('Token или ChatId отсутствуют');\n      }\n    }\n  };\n\n  // Функция отправки сообщения в Telegram\n  const sendTelegramMessage = async (botToken, chatId, sentName, sentPhoneNumber) => {\n    const text = `\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\n        <b>Имя:</b> ${sentName || 'Не указано'}\\n\n        <b>Номер телефона:</b> ${sentPhoneNumber || 'Не указан'}\n        `;\n    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        chat_id: chatId,\n        // Убедитесь, что chatId это только число\n        text: text,\n        parse_mode: 'HTML'\n      })\n    };\n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (!result.ok) {\n        throw new Error(result.description || 'Failed to send message');\n      }\n      console.log('Message sent successfully');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  if (loader) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 50\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorPopup, {\n    timeOut: \"5000\",\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errors.map((error, index) => /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      timeOut: \"5000\",\n      message: error\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }, this)), successMessage && /*#__PURE__*/_jsxDEV(SuccessPopup, {\n      timeOut: \"5000\",\n      message: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.form,\n      style: {\n        display: display\n      },\n      onSubmit: sentDataHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u0418\\u041C\\u042F\",\n        type: \"text\",\n        name: \"text\",\n        className: \"input\",\n        ref: refName,\n        onChange: () => setRefNameValue(refName.current.value),\n        value: refNameValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"\\u0412\\u0412\\u0415\\u0414\\u0418\\u0422\\u0415 \\u041D\\u041E\\u041C\\u0415\\u0420 \\u0422\\u0415\\u041B\\u0415\\u0424\\u041E\\u041D\\u0410 *\",\n        type: \"text\",\n        name: \"number\",\n        className: \"input\",\n        ref: refPhone,\n        onChange: () => setRefPhoneValue(refPhone.current.value),\n        value: refPhoneValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.privacyContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"privacy\",\n          checked: isChecked,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"privacy\",\n          className: styles.privacyText,\n          children: [\"\\u0441\\u043E\\u0433\\u043B\\u0430\\u0441\\u0435\\u043D \\u0441 \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/privacy-policy\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.spanColor,\n              children: \"\\u043F\\u043E\\u043B\\u0438\\u0442\\u0438\\u043A\\u043E\\u0439 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.submitButton,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"textWhiteSmall\",\n          children: \"\\u041E\\u0422\\u041F\\u0420\\u0410\\u0412\\u0418\\u0422\\u042C \\u0417\\u0410\\u042F\\u0412\\u041A\\u0423\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(FormForCall, \"vKW9ZSEbvO1MXd7vxq+RNrOJLnc=\", false, function () {\n  return [useHttp, useValidForm];\n});\n_c = FormForCall;\nexport default FormForCall;\nvar _c;\n$RefreshReg$(_c, \"FormForCall\");","map":{"version":3,"names":["Link","styles","useRef","useState","useEffect","ErrorPopup","SuccessPopup","useValidForm","useHttp","Loading","jsxDEV","_jsxDEV","Fragment","_Fragment","FormForCall","display","_s","_refName$current","_refPhone$current","errors","setErrors","successMessage","setSuccessMessage","isChecked","setIsChecked","refName","refPhone","refNameValue","setRefNameValue","refPhoneValue","setRefPhoneValue","data","loader","error","method","notEmpty","isNameNotEmpty","correctPhoneNumber","isPhoneNumberValid","Infinity","current","value","handleCheckboxChange","e","target","checked","sentDataHandler","preventDefault","newErrors","push","length","_data$Token","console","log","token","Token","split","chatId","ChatId","sendTelegramMessage","botToken","sentName","sentPhoneNumber","text","url","options","headers","body","JSON","stringify","chat_id","parse_mode","response","fetch","ok","Error","status","result","json","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","timeOut","message","map","index","form","style","onSubmit","placeholder","type","name","ref","onChange","privacyContainer","id","htmlFor","privacyText","to","spanColor","submitButton","_c","$RefreshReg$"],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Components/UI/Forms/FormForCall.js"],"sourcesContent":["// import { Link } from \"react-router-dom\";\r\n// import styles from \"./FormForCall.module.css\";\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\n// import SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\n// import useValidForm from \"../../../Hooks/useValidForm\";\r\n// import useHttp from \"../../../Hooks/useHttp\";\r\n// import Loading from \"../LoadingGroup/Loading\";\r\n\r\n// const FormForCall = ({ display }) => {\r\n//     const [errors, setErrors] = useState([]);\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [isChecked, setIsChecked] = useState(false);\r\n//     const [errorStateForTg, setErrorStateForTg] = useState(undefined);\r\n\r\n//     const refName = useRef();\r\n//     const refPhone = useRef();\r\n\r\n//     const [refNameValue, setRefNameValue] = useState(\"\");\r\n//     const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n//     const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n//     useEffect(() => {\r\n//         if (refName.current) {\r\n//             setRefNameValue(refName.current.value);\r\n//         }\r\n//         if (refPhone.current) {\r\n//             setRefPhoneValue(refPhone.current.value);\r\n//         }\r\n//     }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n//     // Обработчик изменения состояния чекбокса\r\n//     const handleCheckboxChange = (e) => {\r\n//         setIsChecked(e.target.checked);\r\n//     };\r\n\r\n//     // Проверяем данные и отправляем сообщение\r\n//     const sentDataHandler = (e) => {\r\n//         e.preventDefault();\r\n//         const newErrors = [];\r\n\r\n//         if (!isNameNotEmpty) {\r\n//             newErrors.push(\"Укажите имя\");\r\n//         }\r\n\r\n//         if (!isPhoneNumberValid) {\r\n//             newErrors.push(\"Укажите номер телефона\");\r\n//         }\r\n\r\n//         if (!isChecked) {\r\n//             newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n//         }\r\n\r\n//         if (newErrors.length > 0) {\r\n//             setErrors(newErrors);\r\n//             setSuccessMessage(\"\");\r\n//         } else {\r\n//             setErrors([]);\r\n//             setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n//             console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n//             sentDataToTelegramHandler();\r\n//         }\r\n//     };\r\n\r\n//     const sentDataToTelegramHandler = async () => {\r\n//         const botToken = '7442718434:AAGyH4vpMGhtYcmMkQJA506EnH6KpM0A6zY';\r\n//         const chatId = '1345888410';\r\n//         const text = `Имя: ${refNameValue}\\nСообщение: ${refPhoneValue.toString()}`;\r\n//         const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n      \r\n//         try {\r\n//           const response = await fetch(url, {\r\n//             method: 'POST',\r\n//             headers: {\r\n//               'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//               chat_id: chatId,\r\n//               text: text,\r\n//             }),\r\n//           });\r\n      \r\n//           if (!response.ok) {\r\n//             setErrorStateForTg(true);\r\n//           } else {\r\n//             setErrorStateForTg(false);\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Ошибка при отправке сообщения в Telegram:', error);\r\n//           setErrorStateForTg(true);\r\n//         }\r\n//       };\r\n      \r\n\r\n//     return (\r\n//         <>\r\n//             {errors.map((error, index) => (\r\n//                 <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n//             ))}\r\n            \r\n//             {errorStateForTg && <ErrorPopup timeOut=\"5000\" message=\"Произошла какая-то ошибка при отправке данных\" />}\r\n//             {errorStateForTg === false && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n\r\n//             <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n//                     type=\"text\"\r\n//                     name=\"text\"\r\n//                     className=\"input\"\r\n//                     ref={refName}\r\n//                     onChange={() => setRefNameValue(refName.current.value)}\r\n//                     value={refNameValue}\r\n//                 />\r\n\r\n//                 <input\r\n//                     placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n//                     type=\"text\"\r\n//                     name=\"number\"\r\n//                     className=\"input\"\r\n//                     ref={refPhone}\r\n//                     onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n//                     value={refPhoneValue}\r\n//                 />\r\n\r\n//                 <div className={styles.privacyContainer}>\r\n//                     <input\r\n//                         type=\"checkbox\"\r\n//                         id=\"privacy\"\r\n//                         checked={isChecked}\r\n//                         onChange={handleCheckboxChange}\r\n//                     />\r\n//                     <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n//                         согласен с <Link to=\"/privacy-policy\">\r\n//                             <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n//                         </Link>\r\n//                     </label>\r\n//                 </div>\r\n\r\n//                 <button type=\"submit\" className={styles.submitButton}>\r\n//                     <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n//                 </button>\r\n//             </form>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default FormForCall;\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./FormForCall.module.css\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport ErrorPopup from \"../ErrorGroup/ErrorPopup\";\r\nimport SuccessPopup from \"../ErrorGroup/SuccessPopup\";\r\nimport useValidForm from \"../../../Hooks/useValidForm\";\r\nimport useHttp from \"../../../Hooks/useHttp\";\r\nimport Loading from \"../LoadingGroup/Loading\";\r\n\r\nconst FormForCall = ({ display }) => {\r\n    const [errors, setErrors] = useState([]);\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    const refName = useRef();\r\n    const refPhone = useRef();\r\n\r\n    const [refNameValue, setRefNameValue] = useState(\"\");\r\n    const [refPhoneValue, setRefPhoneValue] = useState(\"\");\r\n\r\n    // Хук для получения данных из Firebase\r\n    const { data, loader, error } = useHttp(\"https://autobox18-ba317-default-rtdb.firebaseio.com/BotToken.json\", {\r\n        method: \"GET\"\r\n    });\r\n\r\n    const { notEmpty: isNameNotEmpty, correctPhoneNumber: isPhoneNumberValid } = useValidForm(refPhoneValue, 0, Infinity, 0, 0, 0);\r\n\r\n    useEffect(() => {\r\n        if (refName.current) {\r\n            setRefNameValue(refName.current.value);\r\n        }\r\n        if (refPhone.current) {\r\n            setRefPhoneValue(refPhone.current.value);\r\n        }\r\n    }, [refName.current?.value, refPhone.current?.value]);\r\n\r\n    // Обработчик изменения состояния чекбокса\r\n    const handleCheckboxChange = (e) => {\r\n        setIsChecked(e.target.checked);\r\n    };\r\n\r\n    // Проверяем данные и отправляем сообщение\r\n    const sentDataHandler = async (e) => {\r\n        e.preventDefault();\r\n        const newErrors = [];\r\n\r\n        if (!isNameNotEmpty) {\r\n            newErrors.push(\"Укажите имя\");\r\n        }\r\n\r\n        if (!isPhoneNumberValid) {\r\n            newErrors.push(\"Укажите номер телефона\");\r\n        }\r\n\r\n        if (!isChecked) {\r\n            newErrors.push(\"Вы должны согласиться с политикой конфиденциальности\");\r\n        }\r\n\r\n        if (newErrors.length > 0) {\r\n            setErrors(newErrors);\r\n            setSuccessMessage(\"\");\r\n        } else {\r\n            setErrors([]);\r\n            setSuccessMessage(\"Ожидайте, мы вам перезвоним\");\r\n            console.log(`Имя: ${refNameValue}, Номер телефона: ${refPhoneValue}`);\r\n            // Извлечение Token и ChatId из data\r\n            const token = data?.Token?.split('/')[4];  // Извлечение Token из URL\r\n            const chatId = data?.ChatId;  // Прямое использование числового ChatId\r\n\r\n            if (token && chatId) {\r\n                await sendTelegramMessage(token, chatId, refNameValue, refPhoneValue);\r\n            } else {\r\n                console.error('Token или ChatId отсутствуют');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Функция отправки сообщения в Telegram\r\n    const sendTelegramMessage = async (botToken, chatId, sentName, sentPhoneNumber) => {\r\n        const text = `\r\n        <b>У вас новая запись, перезвоните:</b>\\n\\n\r\n        <b>Имя:</b> ${sentName || 'Не указано'}\\n\r\n        <b>Номер телефона:</b> ${sentPhoneNumber || 'Не указан'}\r\n        `;\r\n\r\n        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                chat_id: chatId,  // Убедитесь, что chatId это только число\r\n                text: text,\r\n                parse_mode: 'HTML',\r\n            }),\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, options);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            const result = await response.json();\r\n            if (!result.ok) {\r\n                throw new Error(result.description || 'Failed to send message');\r\n            }\r\n            console.log('Message sent successfully');\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n        }\r\n    };\r\n\r\n    if (loader) return <div className=\"centered\"><Loading/></div>;\r\n    if (error) return <ErrorPopup timeOut=\"5000\" message={error} />;\r\n\r\n    return (\r\n        <>\r\n            {errors.map((error, index) => (\r\n                <ErrorPopup key={index} timeOut=\"5000\" message={error} />\r\n            ))}\r\n            {successMessage && <SuccessPopup timeOut=\"5000\" message={successMessage} />}\r\n            <form className={styles.form} style={{ display: display }} onSubmit={sentDataHandler}>\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ ИМЯ\"\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"input\"\r\n                    ref={refName}\r\n                    onChange={() => setRefNameValue(refName.current.value)}\r\n                    value={refNameValue}\r\n                />\r\n\r\n                <input\r\n                    placeholder=\"ВВЕДИТЕ НОМЕР ТЕЛЕФОНА *\"\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    className=\"input\"\r\n                    ref={refPhone}\r\n                    onChange={() => setRefPhoneValue(refPhone.current.value)}\r\n                    value={refPhoneValue}\r\n                />\r\n\r\n                <div className={styles.privacyContainer}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"privacy\"\r\n                        checked={isChecked}\r\n                        onChange={handleCheckboxChange}\r\n                    />\r\n                    <label htmlFor=\"privacy\" className={styles.privacyText}>\r\n                        согласен с <Link to=\"/privacy-policy\">\r\n                            <span className={styles.spanColor}>политикой конфиденциальности *</span>\r\n                        </Link>\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\" className={styles.submitButton}>\r\n                    <span className='textWhiteSmall'>ОТПРАВИТЬ ЗАЯВКУ</span>\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormForCall;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,SAASC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACnD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,OAAO,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,gBAAA,EAAAC,iBAAA;EACjC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACoB,SAAS,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}