{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n\n// const useHttp = (databaseLink, propertyObject) => {\n//     const [loader, setLoader] = useState(false);\n//     const [data, setData] = useState(null);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setLoader(true);\n//             try {\n//                 const options = {\n//                     method: propertyObject.method,\n//                     headers: propertyObject.headers || {},\n//                     mode: propertyObject.mode || \"cors\",\n//                     credentials: propertyObject.credentials || \"same-origin\",\n//                     cache: propertyObject.cache || \"default\",\n//                 };\n\n//                 if (propertyObject.method !== 'GET' && propertyObject.method !== 'HEAD') {\n//                     options.body = propertyObject.body || \"\";\n//                 }\n\n//                 const response = await fetch(databaseLink, options);\n\n//                 if (!response.ok) {\n//                     throw new Error(response.statusText || 'Unknown error occurred');\n//                 }\n\n//                 const data = await response.json();\n//                 setData(data);\n//             } catch (error) {\n//                 setError(error.message);\n//             } finally {\n//                 setLoader(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, []);\n\n//     return { data, loader, error };\n// };\n\n// export default useHttp;","map":{"version":3,"names":[],"sources":["C:/Users/npatr/Documents/GitHub/AutoBox18/autobox/src/Hooks/useHttp.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n\n// const useHttp = (databaseLink, propertyObject) => {\n//     const [loader, setLoader] = useState(false);\n//     const [data, setData] = useState(null);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setLoader(true);\n//             try {\n//                 const options = {\n//                     method: propertyObject.method,\n//                     headers: propertyObject.headers || {},\n//                     mode: propertyObject.mode || \"cors\",\n//                     credentials: propertyObject.credentials || \"same-origin\",\n//                     cache: propertyObject.cache || \"default\",\n//                 };\n\n//                 if (propertyObject.method !== 'GET' && propertyObject.method !== 'HEAD') {\n//                     options.body = propertyObject.body || \"\";\n//                 }\n\n//                 const response = await fetch(databaseLink, options);\n\n//                 if (!response.ok) {\n//                     throw new Error(response.statusText || 'Unknown error occurred');\n//                 }\n\n//                 const data = await response.json();\n//                 setData(data);\n//             } catch (error) {\n//                 setError(error.message);\n//             } finally {\n//                 setLoader(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, []);\n\n//     return { data, loader, error };\n// };\n\n// export default useHttp;\n\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}